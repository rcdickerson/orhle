
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  play (exists)

:: Universal Programs
[]

:: Existential Programs
[ SSeq
    [ SCall "play!draw" [] [ play ! card ]
    , SAsgn play !
        handValue (AAdd (AVar play ! handValue) (AVar play ! card))
    , SAsgn play ! play ! retVal (AVar play ! handValue)
    ]
]

:: Universal Specifications
fromList []

:: Existential Specifications
fromList [("play!draw",Spec {spec_params = [], spec_choiceVars = [play!c], spec_preCondition = And [Gte (Var play!c) (Num 1),Lte (Var play!c) (Num 10)], spec_postCondition = Eq (Var ret!) (Var play!c)})]

:: Precondition
And
  [ Gte (Var play ! handValue) (Num 2)
  , Lte (Var play ! handValue) (Num 20)
  ]

:: Postcondition
Eq (Var play ! handValue) (Num 21)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const play!handValue Int)
[<-recv] success
[send->] (assert (not (=> (and (>= play!handValue 2) (<= play!handValue 20)) (exists ((play!c!1 Int)) (and (and (>= play!c!1 1) (<= play!c!1 10)) (exists ((play!card!1 Int)) (= play!card!1 play!c!1)) (forall ((play!card!1 Int)) (=> (= play!card!1 play!c!1) (= (+ play!handValue play!card!1) 21))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun play!handValue () Int 2 ) )
[send->] (exit )
Failure:
  Verification conditions are invalid. Model: (model (define-fun play!handValue () Int 2 ) )

real	0m0.187s
user	0m0.164s
sys	0m0.025s
