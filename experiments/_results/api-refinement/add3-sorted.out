
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Universal Programs
[ SSeq
    [ SCall
        "refinement!sort"
        [ AVar refinement ! list_0
        , AVar refinement ! list_1
        , AVar refinement ! list_2
        ]
        [ refinement ! sorted_0
        , refinement ! sorted_1
        , refinement ! sorted_2
        ]
    , SAsgn refinement !
        ret_0 (AAdd (AVar refinement ! sorted_0) (ALit 3))
    , SAsgn refinement !
        ret_1 (AAdd (AVar refinement ! sorted_1) (ALit 3))
    , SAsgn refinement !
        ret_2 (AAdd (AVar refinement ! sorted_2) (ALit 3))
    , SAsgn refinement ! refinement ! retVal (AVar refinement ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SCall
        "original!shuffle"
        [ AVar original ! list_0
        , AVar original ! list_1
        , AVar original ! list_2
        ]
        [ original ! shuffled_0
        , original ! shuffled_1
        , original ! shuffled_2
        ]
    , SAsgn original !
        ret_0 (AAdd (AVar original ! shuffled_0) (ALit 3))
    , SAsgn original !
        ret_1 (AAdd (AVar original ! shuffled_1) (ALit 3))
    , SAsgn original !
        ret_2 (AAdd (AVar original ! shuffled_2) (ALit 3))
    , SAsgn original ! original ! retVal (AVar original ! ret)
    ]
]

:: Universal Specifications
fromList
  [ ( "refinement!sort"
    , Spec
        { spec_params = [ refinement ! list ]
        , spec_choiceVars = []
        , spec_preCondition = ATrue
        , spec_postCondition =
            And
              [ Lte (Var ret) (Var ret ! 1)
              , Lte (Var ret ! 1) (Var ret ! 2)
              , Or
                  [ And
                      [ Eq (Var ret) (Var refinement ! list_0)
                      , Eq (Var ret ! 1) (Var refinement ! list_1)
                      , Eq (Var ret ! 2) (Var refinement ! list_2)
                      ]
                  , And
                      [ Eq (Var ret) (Var refinement ! list_0)
                      , Eq (Var ret ! 1) (Var refinement ! list_2)
                      , Eq (Var ret ! 2) (Var refinement ! list_1)
                      ]
                  , And
                      [ Eq (Var ret) (Var refinement ! list_1)
                      , Eq (Var ret ! 1) (Var refinement ! list_0)
                      , Eq (Var ret ! 2) (Var refinement ! list_2)
                      ]
                  , And
                      [ Eq (Var ret) (Var refinement ! list_1)
                      , Eq (Var ret ! 1) (Var refinement ! list_2)
                      , Eq (Var ret ! 2) (Var refinement ! list_0)
                      ]
                  , And
                      [ Eq (Var ret) (Var refinement ! list_2)
                      , Eq (Var ret ! 1) (Var refinement ! list_0)
                      , Eq (Var ret ! 2) (Var refinement ! list_1)
                      ]
                  , And
                      [ Eq (Var ret) (Var refinement ! list_2)
                      , Eq (Var ret ! 1) (Var refinement ! list_1)
                      , Eq (Var ret ! 2) (Var refinement ! list_0)
                      ]
                  ]
              ]
        }
    )
  ]

:: Existential Specifications
fromList
  [ ( "original!shuffle"
    , Spec
        { spec_params = [ original ! list ]
        , spec_choiceVars =
            [ original ! n0 , original ! n1 , original ! n2 ]
        , spec_preCondition =
            Or
              [ And
                  [ Eq (Var original ! n0) (Var original ! list_0)
                  , Eq (Var original ! n1) (Var original ! list_1)
                  , Eq (Var original ! n2) (Var original ! list_2)
                  ]
              , And
                  [ Eq (Var original ! n0) (Var original ! list_0)
                  , Eq (Var original ! n1) (Var original ! list_2)
                  , Eq (Var original ! n2) (Var original ! list_1)
                  ]
              , And
                  [ Eq (Var original ! n0) (Var original ! list_1)
                  , Eq (Var original ! n1) (Var original ! list_0)
                  , Eq (Var original ! n2) (Var original ! list_2)
                  ]
              , And
                  [ Eq (Var original ! n0) (Var original ! list_1)
                  , Eq (Var original ! n1) (Var original ! list_2)
                  , Eq (Var original ! n2) (Var original ! list_0)
                  ]
              , And
                  [ Eq (Var original ! n0) (Var original ! list_2)
                  , Eq (Var original ! n1) (Var original ! list_0)
                  , Eq (Var original ! n2) (Var original ! list_1)
                  ]
              , And
                  [ Eq (Var original ! n0) (Var original ! list_2)
                  , Eq (Var original ! n1) (Var original ! list_1)
                  , Eq (Var original ! n2) (Var original ! list_0)
                  ]
              ]
        , spec_postCondition =
            And
              [ Eq (Var ret) (Var original ! n0)
              , Eq (Var ret ! 1) (Var original ! n1)
              , Eq (Var ret ! 2) (Var original ! n2)
              ]
        }
    )
  ]

:: Precondition
And
  [ Eq (Var original ! list_0) (Var refinement ! list_0)
  , Eq (Var original ! list_1) (Var refinement ! list_1)
  , Eq (Var original ! list_2) (Var refinement ! list_2)
  ]

:: Postcondition
And
  [ Eq (Var original ! ret_0) (Var refinement ! ret_0)
  , Eq (Var original ! ret_1) (Var refinement ! ret_1)
  , Eq (Var original ! ret_2) (Var refinement ! ret_2)
  ]

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!list_0 Int)
[<-recv] success
[send->] (declare-const original!list_1 Int)
[<-recv] success
[send->] (declare-const original!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!list_0 Int)
[<-recv] success
[send->] (declare-const refinement!list_1 Int)
[<-recv] success
[send->] (declare-const refinement!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!sorted_0!1 Int)
[<-recv] success
[send->] (declare-const refinement!sorted_1!1 Int)
[<-recv] success
[send->] (declare-const refinement!sorted_2!1 Int)
[<-recv] success
[send->] (assert (not (=> (and (= original!list_0 refinement!list_0) (= original!list_1 refinement!list_1) (= original!list_2 refinement!list_2)) (exists ((original!n0!1 Int) (original!n1!1 Int) (original!n2!1 Int)) (and (or (and (= original!n0!1 original!list_0) (= original!n1!1 original!list_1) (= original!n2!1 original!list_2)) (and (= original!n0!1 original!list_0) (= original!n1!1 original!list_2) (= original!n2!1 original!list_1)) (and (= original!n0!1 original!list_1) (= original!n1!1 original!list_0) (= original!n2!1 original!list_2)) (and (= original!n0!1 original!list_1) (= original!n1!1 original!list_2) (= original!n2!1 original!list_0)) (and (= original!n0!1 original!list_2) (= original!n1!1 original!list_0) (= original!n2!1 original!list_1)) (and (= original!n0!1 original!list_2) (= original!n1!1 original!list_1) (= original!n2!1 original!list_0))) (exists ((original!shuffled_0!1 Int) (original!shuffled_1!1 Int) (original!shuffled_2!1 Int)) (and (= original!shuffled_0!1 original!n0!1) (= original!shuffled_1!1 original!n1!1) (= original!shuffled_2!1 original!n2!1))) (forall ((original!shuffled_0!1 Int) (original!shuffled_1!1 Int) (original!shuffled_2!1 Int)) (=> (and (= original!shuffled_0!1 original!n0!1) (= original!shuffled_1!1 original!n1!1) (= original!shuffled_2!1 original!n2!1)) (and true (=> (and (<= refinement!sorted_0!1 refinement!sorted_1!1) (<= refinement!sorted_1!1 refinement!sorted_2!1) (or (and (= refinement!sorted_0!1 refinement!list_0) (= refinement!sorted_1!1 refinement!list_1) (= refinement!sorted_2!1 refinement!list_2)) (and (= refinement!sorted_0!1 refinement!list_0) (= refinement!sorted_1!1 refinement!list_2) (= refinement!sorted_2!1 refinement!list_1)) (and (= refinement!sorted_0!1 refinement!list_1) (= refinement!sorted_1!1 refinement!list_0) (= refinement!sorted_2!1 refinement!list_2)) (and (= refinement!sorted_0!1 refinement!list_1) (= refinement!sorted_1!1 refinement!list_2) (= refinement!sorted_2!1 refinement!list_0)) (and (= refinement!sorted_0!1 refinement!list_2) (= refinement!sorted_1!1 refinement!list_0) (= refinement!sorted_2!1 refinement!list_1)) (and (= refinement!sorted_0!1 refinement!list_2) (= refinement!sorted_1!1 refinement!list_1) (= refinement!sorted_2!1 refinement!list_0)))) (and (= (+ original!shuffled_0!1 3) (+ refinement!sorted_0!1 3)) (= (+ original!shuffled_1!1 3) (+ refinement!sorted_1!1 3)) (= (+ original!shuffled_2!1 3) (+ refinement!sorted_2!1 3))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
Valid.

real	0m0.207s
user	0m0.214s
sys	0m0.009s
