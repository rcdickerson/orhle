
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Universal Programs
[ SSeq
    [ SCall
        "refinement!refinedGetValues"
        []
        [ refinement ! list_0 , refinement ! list_1 , refinement ! list_2 ]
    , SAsgn refinement !
        sum
          (AAdd
             (AAdd (AVar refinement ! list_0) (AVar refinement ! list_1))
             (AVar refinement ! list_2))
    , SAsgn refinement ! refinement ! retVal (AVar refinement ! sum)
    ]
]

:: Existential Programs
[ SSeq
    [ SCall
        "original!originalGetValues"
        []
        [ original ! list_0 , original ! list_1 , original ! list_2 ]
    , SAsgn original !
        sum
          (AAdd
             (AAdd (AVar original ! list_0) (AVar original ! list_1))
             (AVar original ! list_2))
    , SAsgn original ! original ! retVal (AVar original ! sum)
    ]
]

:: Universal Specifications
fromList
  [ ( "refinement!refinedGetValues"
    , Spec
        { spec_params = []
        , spec_choiceVars = []
        , spec_preCondition = ATrue
        , spec_postCondition = ATrue
        }
    )
  ]

:: Existential Specifications
fromList
  [ ( "original!originalGetValues"
    , Spec
        { spec_params = []
        , spec_choiceVars =
            [ original ! n0 , original ! n1 , original ! n2 ]
        , spec_preCondition =
            And
              [ Lte (Var original ! n0) (Var original ! n1)
              , Lte (Var original ! n1) (Var original ! n2)
              ]
        , spec_postCondition =
            And
              [ Eq (Var ret) (Var original ! n0)
              , Eq (Var ret ! 1) (Var original ! n1)
              , Eq (Var ret ! 2) (Var original ! n2)
              ]
        }
    )
  ]

:: Precondition
Or
  [ And
      [ Eq (Var original ! list_0) (Var refinement ! list_0)
      , Eq (Var original ! list_1) (Var refinement ! list_1)
      , Eq (Var original ! list_2) (Var refinement ! list_2)
      ]
  , And
      [ Eq (Var original ! list_0) (Var refinement ! list_0)
      , Eq (Var original ! list_1) (Var refinement ! list_2)
      , Eq (Var original ! list_2) (Var refinement ! list_1)
      ]
  , And
      [ Eq (Var original ! list_0) (Var refinement ! list_1)
      , Eq (Var original ! list_1) (Var refinement ! list_0)
      , Eq (Var original ! list_2) (Var refinement ! list_2)
      ]
  , And
      [ Eq (Var original ! list_0) (Var refinement ! list_1)
      , Eq (Var original ! list_1) (Var refinement ! list_2)
      , Eq (Var original ! list_2) (Var refinement ! list_0)
      ]
  , And
      [ Eq (Var original ! list_0) (Var refinement ! list_2)
      , Eq (Var original ! list_1) (Var refinement ! list_0)
      , Eq (Var original ! list_2) (Var refinement ! list_1)
      ]
  , And
      [ Eq (Var original ! list_0) (Var refinement ! list_2)
      , Eq (Var original ! list_1) (Var refinement ! list_1)
      , Eq (Var original ! list_2) (Var refinement ! list_0)
      ]
  ]

:: Postcondition
Eq (Var original ! sum) (Var refinement ! sum)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!list_0 Int)
[<-recv] success
[send->] (declare-const original!list_1 Int)
[<-recv] success
[send->] (declare-const original!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!list_0 Int)
[<-recv] success
[send->] (declare-const refinement!list_0!1 Int)
[<-recv] success
[send->] (declare-const refinement!list_1 Int)
[<-recv] success
[send->] (declare-const refinement!list_1!1 Int)
[<-recv] success
[send->] (declare-const refinement!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!list_2!1 Int)
[<-recv] success
[send->] (assert (not (=> (or (and (= original!list_0 refinement!list_0) (= original!list_1 refinement!list_1) (= original!list_2 refinement!list_2)) (and (= original!list_0 refinement!list_0) (= original!list_1 refinement!list_2) (= original!list_2 refinement!list_1)) (and (= original!list_0 refinement!list_1) (= original!list_1 refinement!list_0) (= original!list_2 refinement!list_2)) (and (= original!list_0 refinement!list_1) (= original!list_1 refinement!list_2) (= original!list_2 refinement!list_0)) (and (= original!list_0 refinement!list_2) (= original!list_1 refinement!list_0) (= original!list_2 refinement!list_1)) (and (= original!list_0 refinement!list_2) (= original!list_1 refinement!list_1) (= original!list_2 refinement!list_0))) (exists ((original!n0!1 Int) (original!n1!1 Int) (original!n2!1 Int)) (and (and (<= original!n0!1 original!n1!1) (<= original!n1!1 original!n2!1)) (exists ((original!list_0!1 Int) (original!list_1!1 Int) (original!list_2!1 Int)) (and (= original!list_0!1 original!n0!1) (= original!list_1!1 original!n1!1) (= original!list_2!1 original!n2!1))) (forall ((original!list_0!1 Int) (original!list_1!1 Int) (original!list_2!1 Int)) (=> (and (= original!list_0!1 original!n0!1) (= original!list_1!1 original!n1!1) (= original!list_2!1 original!n2!1)) (and true (=> true (= (+ (+ original!list_0!1 original!list_1!1) original!list_2!1) (+ (+ refinement!list_0!1 refinement!list_1!1) refinement!list_2!1)))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
Valid.

real	0m0.187s
user	0m0.183s
sys	0m0.017s
