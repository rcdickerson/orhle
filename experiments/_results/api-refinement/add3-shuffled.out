
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Universal Programs
[ ImpSeq
    [ SpecCall
        { sc_callId = "refinement!shuffle"
        , sc_args =
            [ AVar Name { nHandle = "refinement!list_0" , nId = 0 }
            , AVar Name { nHandle = "refinement!list_1" , nId = 0 }
            , AVar Name { nHandle = "refinement!list_2" , nId = 0 }
            ]
        , sc_assignees =
            [ Name { nHandle = "refinement!shuffled_0" , nId = 0 }
            , Name { nHandle = "refinement!shuffled_1" , nId = 0 }
            , Name { nHandle = "refinement!shuffled_2" , nId = 0 }
            ]
        }
    , ImpAsgn
        Name { nHandle = "refinement!ret_0" , nId = 0 }
        (AAdd
           (AVar Name { nHandle = "refinement!shuffled_0" , nId = 0 })
           (ALit 3))
    , ImpAsgn
        Name { nHandle = "refinement!ret_1" , nId = 0 }
        (AAdd
           (AVar Name { nHandle = "refinement!shuffled_1" , nId = 0 })
           (ALit 3))
    , ImpAsgn
        Name { nHandle = "refinement!ret_2" , nId = 0 }
        (AAdd
           (AVar Name { nHandle = "refinement!shuffled_2" , nId = 0 })
           (ALit 3))
    , ImpAsgn
        Name { nHandle = "refinement!refinement!retVal" , nId = 0 }
        (AVar Name { nHandle = "refinement!ret" , nId = 0 })
    ]
]

:: Existential Programs
[ ImpSeq
    [ SpecCall
        { sc_callId = "original!sort"
        , sc_args =
            [ AVar Name { nHandle = "original!list_0" , nId = 0 }
            , AVar Name { nHandle = "original!list_1" , nId = 0 }
            , AVar Name { nHandle = "original!list_2" , nId = 0 }
            ]
        , sc_assignees =
            [ Name { nHandle = "original!sorted_0" , nId = 0 }
            , Name { nHandle = "original!sorted_1" , nId = 0 }
            , Name { nHandle = "original!sorted_2" , nId = 0 }
            ]
        }
    , ImpAsgn
        Name { nHandle = "original!ret_0" , nId = 0 }
        (AAdd
           (AVar Name { nHandle = "original!sorted_0" , nId = 0 }) (ALit 3))
    , ImpAsgn
        Name { nHandle = "original!ret_1" , nId = 0 }
        (AAdd
           (AVar Name { nHandle = "original!sorted_1" , nId = 0 }) (ALit 3))
    , ImpAsgn
        Name { nHandle = "original!ret_2" , nId = 0 }
        (AAdd
           (AVar Name { nHandle = "original!sorted_2" , nId = 0 }) (ALit 3))
    , ImpAsgn
        Name { nHandle = "original!original!retVal" , nId = 0 }
        (AVar Name { nHandle = "original!ret" , nId = 0 })
    ]
]

:: Universal Specifications
fromList
  [ ( "refinement!shuffle"
    , Specification
        { spec_params =
            [ Name { nHandle = "refinement!list_0" , nId = 0 }
            , Name { nHandle = "refinement!list_1" , nId = 0 }
            , Name { nHandle = "refinement!list_2" , nId = 0 }
            ]
        , spec_returnVars = []
        , spec_choiceVars = []
        , spec_preCondition = ATrue
        , spec_postCondition =
            Or
              [ And
                  [ Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 0 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 1 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_1" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 2 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
                           , tnType = Int
                           })
                  ]
              , And
                  [ Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 0 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 1 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 2 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_1" , nId = 0 }
                           , tnType = Int
                           })
                  ]
              , And
                  [ Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 0 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_1" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 1 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 2 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
                           , tnType = Int
                           })
                  ]
              , And
                  [ Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 0 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_1" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 1 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 2 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
                           , tnType = Int
                           })
                  ]
              , And
                  [ Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 0 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 1 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 2 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_1" , nId = 0 }
                           , tnType = Int
                           })
                  ]
              , And
                  [ Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 0 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 1 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_1" , nId = 0 }
                           , tnType = Int
                           })
                  , Eq
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!ret" , nId = 2 }
                           , tnType = Int
                           })
                      (Var
                         TypedName
                           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
                           , tnType = Int
                           })
                  ]
              ]
        }
    )
  ]

:: Existential Specifications
fromList
  [ ( "original!sort"
    , Specification
        { spec_params =
            [ Name { nHandle = "original!list_0" , nId = 0 }
            , Name { nHandle = "original!list_1" , nId = 0 }
            , Name { nHandle = "original!list_2" , nId = 0 }
            ]
        , spec_returnVars = []
        , spec_choiceVars =
            [ TypedName
                { tnName = Name { nHandle = "original!n0" , nId = 0 }
                , tnType = Int
                }
            , TypedName
                { tnName = Name { nHandle = "original!n1" , nId = 0 }
                , tnType = Int
                }
            , TypedName
                { tnName = Name { nHandle = "original!n2" , nId = 0 }
                , tnType = Int
                }
            ]
        , spec_preCondition =
            And
              [ Lte
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n0" , nId = 0 }
                       , tnType = Int
                       })
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n1" , nId = 0 }
                       , tnType = Int
                       })
              , Lte
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n1" , nId = 0 }
                       , tnType = Int
                       })
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n2" , nId = 0 }
                       , tnType = Int
                       })
              , Or
                  [ And
                      [ Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n0" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_0" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n1" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_1" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n2" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_2" , nId = 0 }
                               , tnType = Int
                               })
                      ]
                  , And
                      [ Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n0" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_0" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n1" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_2" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n2" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_1" , nId = 0 }
                               , tnType = Int
                               })
                      ]
                  , And
                      [ Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n0" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_1" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n1" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_0" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n2" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_2" , nId = 0 }
                               , tnType = Int
                               })
                      ]
                  , And
                      [ Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n0" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_1" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n1" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_2" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n2" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_0" , nId = 0 }
                               , tnType = Int
                               })
                      ]
                  , And
                      [ Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n0" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_2" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n1" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_0" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n2" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_1" , nId = 0 }
                               , tnType = Int
                               })
                      ]
                  , And
                      [ Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n0" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_2" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n1" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_1" , nId = 0 }
                               , tnType = Int
                               })
                      , Eq
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!n2" , nId = 0 }
                               , tnType = Int
                               })
                          (Var
                             TypedName
                               { tnName = Name { nHandle = "original!list_0" , nId = 0 }
                               , tnType = Int
                               })
                      ]
                  ]
              ]
        , spec_postCondition =
            And
              [ Eq
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!ret" , nId = 0 }
                       , tnType = Int
                       })
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n0" , nId = 0 }
                       , tnType = Int
                       })
              , Eq
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!ret" , nId = 1 }
                       , tnType = Int
                       })
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n1" , nId = 0 }
                       , tnType = Int
                       })
              , Eq
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!ret" , nId = 2 }
                       , tnType = Int
                       })
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n2" , nId = 0 }
                       , tnType = Int
                       })
              ]
        }
    )
  ]

:: Precondition
And
  [ Eq
      (Var
         TypedName
           { tnName = Name { nHandle = "original!list_0" , nId = 0 }
           , tnType = Int
           })
      (Var
         TypedName
           { tnName = Name { nHandle = "refinement!list_0" , nId = 0 }
           , tnType = Int
           })
  , Eq
      (Var
         TypedName
           { tnName = Name { nHandle = "original!list_1" , nId = 0 }
           , tnType = Int
           })
      (Var
         TypedName
           { tnName = Name { Populating test states for loop invariant inference...
nHandle = "refinement!list_1" , nId = 0 }
           , tnType = Int
           })
  , Eq
      (Var
         TypedName
           { tnName = Name { nHandle = "original!list_2" , nId = 0 }
           , tnType = Int
           })
      (Var
         TypedName
           { tnName = Name { nHandle = "refinement!list_2" , nId = 0 }
           , tnType = Int
           })
  ]

:: Postcondition
And
  [ Eq
      (Var
         TypedName
           { tnName = Name { nHandle = "original!ret_0" , nId = 0 }
           , tnType = Int
           })
      (Var
         TypedName
           { tnName = Name { nHandle = "refinement!ret_0" , nId = 0 }
           , tnType = Int
           })
  , Eq
      (Var
         TypedName
           { tnName = Name { nHandle = "original!ret_1" , nId = 0 }
           , tnType = Int
           })
      (Var
         TypedName
           { tnName = Name { nHandle = "refinement!ret_1" , nId = 0 }
           , tnType = Int
           })
  , Eq
      (Var
         TypedName
           { tnName = Name { nHandle = "original!ret_2" , nId = 0 }
           , tnType = Int
           })
      (Var
         TypedName
           { tnName = Name { nHandle = "refinement!ret_2" , nId = 0 }
           , tnType = Int
           })
  ]

Failure:
  Assignees / returns length mismatch

real	0m0.211s
user	0m0.341s
sys	0m0.066s
