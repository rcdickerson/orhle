Populating test states for loop invariant inference...
Running backward relational analysis...
[PIE] Beginning invariant inference with PIE
[PIE] LoopInvGen searching for initial candidate invariant...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 102 ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 102))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= original!sum 0)
[PIE] vPreGen candidate precondition: (<= original!sum 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= original!sum 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 0 ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= refinement!sum 0)
[PIE] vPreGen candidate precondition: (<= refinement!sum 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= refinement!sum 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 101 ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!sum 0) (= original!sum 101))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= (+ original!sum refinement!sum) 0)
[PIE] vPreGen candidate precondition: (<= (+ original!sum refinement!sum) 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= (+ original!sum refinement!sum) 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int (- 101 ) ) (define-fun original!sum () Int 101 ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!sum (- 101)) (= original!sum 101))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 0) (= original!sum 101))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int (- 101 ) ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= refinement!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (and (<= original!sum 0) (<= refinement!sum 0))
[PIE] vPreGen candidate precondition: (and (<= original!sum 0) (<= refinement!sum 0))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (<= original!sum 0) (<= refinement!sum 0)) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[PIE] vPreGen found satisfactory precondition: (and (<= original!sum 0) (<= refinement!sum 0))
[PIE] LoopInvGen initial invariant: (and (<= original!sum 0) (<= refinement!sum 0))
[send->] (set-option :print-success true )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= original!sum 0) (<= refinement!sum 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!7 Int)) (and (and (<= 0 original!n!7) (< original!n!7 10)) (exists ((original!r Int)) (= original!r original!n!7)) (forall ((original!r Int)) (=> (= original!r original!n!7) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 0)))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[PIE] LoopInvGen invariant not inductive, attempting to strengthen...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= original!sum 0) (<= refinement!sum 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!8 Int)) (and (and (<= 0 original!n!8) (< original!n!8 10)) (exists ((original!r Int)) (= original!r original!n!8)) (forall ((original!r Int)) (=> (= original!r original!n!8) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 0)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (and (and (<= original!sum 0) (<= refinement!sum 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!8 Int)) (and (and (<= 0 original!n!8) (< original!n!8 10)) (exists ((original!r Int)) (= original!r original!n!8)) (forall ((original!r Int)) (=> (= original!r original!n!8) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 0))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= original!sum 0) (<= refinement!sum 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!8 Int)) (and (and (<= 0 original!n!8) (< original!n!8 10)) (exists ((original!r Int)) (= original!r original!n!8)) (forall ((original!r Int)) (=> (= original!r original!n!8) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 0)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Single conflict has no separating feature, giving up
[PIE] LoopInvGen unable to find inductive strengthening, backtracking
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= original!sum 0)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!9 Int)) (and (and (<= 0 original!n!9) (< original!n!9 10)) (exists ((original!r Int)) (= original!r original!n!9)) (forall ((original!r Int)) (=> (= original!r original!n!9) (<= (+ original!sum original!r) 0))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= refinement!sum 0)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!10 Int)) (and (and (<= 0 original!n!10) (< original!n!10 10)) (exists ((original!r Int)) (= original!r original!n!10)) (forall ((original!r Int)) (=> (= original!r original!n!10) (<= (+ refinement!sum refinement!r) 0))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 100 ) )
[send->] (exit )
[PIE] LoopInvGen searching for initial candidate invariant...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 102 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 102))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= original!sum 0)
[PIE] vPreGen candidate precondition: (<= original!sum 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= original!sum 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= refinement!sum 1)
[PIE] vPreGen candidate precondition: (<= refinement!sum 1)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (<= refinement!sum 1) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[PIE] vPreGen found counterexample: (and (= refinement!sum 0) (= original!sum 101))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= (+ original!sum refinement!sum) 0)
[PIE] vPreGen candidate precondition: (<= (+ original!sum refinement!sum) 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int (- 101 ) ) (define-fun original!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= (+ original!sum refinement!sum) 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[PIE] vPreGen found counterexample: (and (= refinement!sum (- 101)) (= original!sum 101))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 0) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 0) (= original!sum 101))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int (- 101 ) ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 0) (= original!sum 101)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= refinement!sum 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (and (<= original!sum 0) (<= refinement!sum 1))
[PIE] vPreGen candidate precondition: (and (<= original!sum 0) (<= refinement!sum 1))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (<= original!sum 0) (<= refinement!sum 1)) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[PIE] vPreGen found satisfactory precondition: (and (<= original!sum 0) (<= refinement!sum 1))
[PIE] LoopInvGen initial invariant: (and (<= original!sum 0) (<= refinement!sum 1))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!11 Int)) (and (and (<= 0 original!n!11) (< original!n!11 10)) (exists ((original!r Int)) (= original!r original!n!11)) (forall ((original!r Int)) (=> (= original!r original!n!11) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 2 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[PIE] LoopInvGen invariant not inductive, attempting to strengthen...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!12 Int)) (and (and (<= 0 original!n!12) (< original!n!12 10)) (exists ((original!r Int)) (= original!r original!n!12)) (forall ((original!r Int)) (=> (= original!r original!n!12) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!12 Int)) (and (and (<= 0 original!n!12) (< original!n!12 10)) (exists ((original!r Int)) (= original!r original!n!12)) (forall ((original!r Int)) (=> (= original!r original!n!12) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 2 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] vPreGen found counterexample: (and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!12 Int)) (and (and (<= 0 original!n!12) (< original!n!12 10)) (exists ((original!r Int)) (= original!r original!n!12)) (forall ((original!r Int)) (=> (= original!r original!n!12) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0)) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 0 ) (define-fun refinement!r () Int 2 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= refinement!r 1)
[PIE] vPreGen candidate precondition: (<= refinement!r 1)
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 1 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= refinement!r 1) (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!12 Int)) (and (and (<= 0 original!n!12) (< original!n!12 10)) (exists ((original!r Int)) (= original!r original!n!12)) (forall ((original!r Int)) (=> (= original!r original!n!12) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1))))))))))) )
[<-recv] success
[send->] (check-sat )
[PIE] vPreGen found counterexample: (and (= refinement!r 1) (= original!sum 0) (= refinement!sum 1))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!12 Int)) (and (and (<= 0 original!n!12) (< original!n!12 10)) (exists ((original!r Int)) (= original!r original!n!12)) (forall ((original!r Int)) (=> (= original!r original!n!12) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 1))","(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 1))","(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!r 1) (= original!sum 0) (= refinement!sum 1)) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!r () Int 1 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0)) (<= (+ refinement!r refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 0 ) (define-fun refinement!r () Int 2 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= (+ refinement!r refinement!sum) 1)
[PIE] vPreGen candidate precondition: (<= (+ refinement!r refinement!sum) 1)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= (+ refinement!r refinement!sum) 1) (=> (and (and (<= original!sum 0) (<= refinement!sum 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!12 Int)) (and (and (<= 0 original!n!12) (< original!n!12 10)) (exists ((original!r Int)) (= original!r original!n!12)) (forall ((original!r Int)) (=> (= original!r original!n!12) (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[PIE] vPreGen found satisfactory precondition: (<= (+ refinement!r refinement!sum) 1)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (and (<= original!sum 0) (<= refinement!sum 1)) (<= (+ refinement!r refinement!sum) 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!13 Int)) (and (and (<= 0 original!n!13) (< original!n!13 10)) (exists ((original!r Int)) (= original!r original!n!13)) (forall ((original!r Int)) (=> (= original!r original!n!13) (and (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)) (<= (+ refinement!r (+ refinement!sum refinement!r)) 1)))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[PIE] LoopInvGen invariant not inductive, attempting to strengthen...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (and (<= original!sum 0) (<= refinement!sum 1)) (<= (+ refinement!r refinement!sum) 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!14 Int)) (and (and (<= 0 original!n!14) (< original!n!14 10)) (exists ((original!r Int)) (= original!r original!n!14)) (forall ((original!r Int)) (=> (= original!r original!n!14) (and (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)) (<= (+ refinement!r (+ refinement!sum refinement!r)) 1)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (and (and (and (<= original!sum 0) (<= refinement!sum 1)) (<= (+ refinement!r refinement!sum) 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!14 Int)) (and (and (<= 0 original!n!14) (< original!n!14 10)) (exists ((original!r Int)) (= original!r original!n!14)) (forall ((original!r Int)) (=> (= original!r original!n!14) (and (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)) (<= (+ refinement!r (+ refinement!sum refinement!r)) 1))))))))))) )
[PIE] vPreGen found counterexample: (and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (and (<= original!sum 0) (<= refinement!sum 1)) (<= (+ refinement!r refinement!sum) 1)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!14 Int)) (and (and (<= 0 original!n!14) (< original!n!14 10)) (exists ((original!r Int)) (= original!r original!n!14)) (forall ((original!r Int)) (=> (= original!r original!n!14) (and (and (<= (+ original!sum original!r) 0) (<= (+ refinement!sum refinement!r) 1)) (<= (+ refinement!r (+ refinement!sum refinement!r)) 1)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Single conflict has no separating feature, giving up
[PIE] LoopInvGen unable to find inductive strengthening, backtracking
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= original!sum 0)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!15 Int)) (and (and (<= 0 original!n!15) (< original!n!15 10)) (exists ((original!r Int)) (= original!r original!n!15)) (forall ((original!r Int)) (=> (= original!r original!n!15) (<= (+ original!sum original!r) 0))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= refinement!sum 1)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!16 Int)) (and (and (<= 0 original!n!16) (< original!n!16 10)) (exists ((original!r Int)) (= original!r original!n!16)) (forall ((original!r Int)) (=> (= original!r original!n!16) (<= (+ refinement!sum refinement!r) 1))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 2 ) (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 100 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] LoopInvGen searching for initial candidate invariant...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 102 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 102))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= original!sum 0)
[PIE] vPreGen candidate precondition: (<= original!sum 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= original!sum 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= (+ original!sum refinement!sum) 0)
[PIE] vPreGen candidate precondition: (<= (+ original!sum refinement!sum) 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= (+ original!sum refinement!sum) 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int (- 101 ) ) (define-fun original!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[PIE] vPreGen found counterexample: (and (= refinement!sum (- 101)) (= original!sum 101))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int (- 101 ) ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0))
[PIE] vPreGen candidate precondition: (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0)) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int (- 101 ) ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum (- 101)))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum (- 101)))","(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum (- 101)))","(and (= refinement!sum (- 101)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 101))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum (- 101)))","(and (= refinement!sum (- 101)) (= original!sum 101))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 101)) (= original!sum 101))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 101))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 101))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int (- 101 ) ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum (- 101)))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 101))) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int (- 101 ) ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 101))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 101))) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int (- 101 ) ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 101)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (* -1 original!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (* -1 original!sum) 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0))
[PIE] vPreGen candidate precondition: (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[PIE] vPreGen found satisfactory precondition: (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0))
[PIE] LoopInvGen initial invariant: (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!17 Int)) (and (and (<= 0 original!n!17) (< original!n!17 10)) (exists ((original!r Int)) (= original!r original!n!17)) (forall ((original!r Int)) (=> (= original!r original!n!17) (and (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0) (<= (+ original!sum original!r) 0) (<= (* -1 (+ original!sum original!r)) 0)))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 2 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] LoopInvGen invariant not inductive, attempting to strengthen...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!18 Int)) (and (and (<= 0 original!n!18) (< original!n!18 10)) (exists ((original!r Int)) (= original!r original!n!18)) (forall ((original!r Int)) (=> (= original!r original!n!18) (and (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0) (<= (+ original!sum original!r) 0) (<= (* -1 (+ original!sum original!r)) 0)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 2 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (and (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!18 Int)) (and (and (<= 0 original!n!18) (< original!n!18 10)) (exists ((original!r Int)) (= original!r original!n!18)) (forall ((original!r Int)) (=> (= original!r original!n!18) (and (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0) (<= (+ original!sum original!r) 0) (<= (* -1 (+ original!sum original!r)) 0))))))))))) )
[<-recv] success
[send->] (check-sat )
[PIE] vPreGen found counterexample: (and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!18 Int)) (and (and (<= 0 original!n!18) (< original!n!18 10)) (exists ((original!r Int)) (= original!r original!n!18)) (forall ((original!r Int)) (=> (= original!r original!n!18) (and (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0) (<= (+ original!sum original!r) 0) (<= (* -1 (+ original!sum original!r)) 0)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0)) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 0 ) (define-fun refinement!r () Int 2 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= refinement!r 1)
[PIE] vPreGen candidate precondition: (<= refinement!r 1)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= refinement!r 1) (=> (and (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!18 Int)) (and (and (<= 0 original!n!18) (< original!n!18 10)) (exists ((original!r Int)) (= original!r original!n!18)) (forall ((original!r Int)) (=> (= original!r original!n!18) (and (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0) (<= (+ original!sum original!r) 0) (<= (* -1 (+ original!sum original!r)) 0))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 1 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[PIE] vPreGen found counterexample: (and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (and (and (<= (+ original!sum refinement!sum) 0) (<= original!sum 0) (<= (* -1 original!sum) 0)) (and (<= refinement!sum 100) (<= original!sum 100))) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!18 Int)) (and (and (<= 0 original!n!18) (< original!n!18 10)) (exists ((original!r Int)) (= original!r original!n!18)) (forall ((original!r Int)) (=> (= original!r original!n!18) (and (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0) (<= (+ original!sum original!r) 0) (<= (* -1 (+ original!sum original!r)) 0)))))))))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))","(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))","(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0)) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!r 2) (= original!sum 0) (= refinement!sum 0)) (<= refinement!r 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 0 ) (define-fun original!sum () Int 0 ) (define-fun refinement!r () Int 2 ) )
[send->] (exit )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in good tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!r 1) (= original!sum 0) (= refinement!sum 0))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Single conflict has no separating feature, giving up
[PIE] LoopInvGen unable to find inductive strengthening, backtracking
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= (+ original!sum refinement!sum) 0)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!19 Int)) (and (and (<= 0 original!n!19) (< original!n!19 10)) (exists ((original!r Int)) (= original!r original!n!19)) (forall ((original!r Int)) (=> (= original!r original!n!19) (<= (+ (+ original!sum original!r) (+ refinement!sum refinement!r)) 0))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!r () Int 2 ) (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= original!sum 0)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!20 Int)) (and (and (<= 0 original!n!20) (< original!n!20 10)) (exists ((original!r Int)) (= original!r original!n!20)) (forall ((original!r Int)) (=> (= original!r original!n!20) (<= (+ original!sum original!r) 0))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (<= refinement!sum 100) (<= original!sum 100)) (<= (* -1 original!sum) 0)) (and true (=> (and (<= 0 refinement!r) (< refinement!r 11)) (exists ((original!n!21 Int)) (and (and (<= 0 original!n!21) (< original!n!21 10)) (exists ((original!r Int)) (= original!r original!n!21)) (forall ((original!r Int)) (=> (= original!r original!n!21) (<= (* -1 (+ original!sum original!r)) 0))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[PIE] LoopInvGen searching for initial candidate invariant...
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: []
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: true
[PIE] vPreGen candidate precondition: true
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> true (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 102 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 102))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= original!sum 0)
[PIE] vPreGen candidate precondition: (<= original!sum 0)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= original!sum 0) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int 0 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum 0))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (<= (+ original!sum refinement!sum) 1)
[PIE] vPreGen candidate precondition: (<= (+ original!sum refinement!sum) 1)
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int (- 100 ) ) (define-fun original!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (<= (+ original!sum refinement!sum) 1) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[PIE] vPreGen found counterexample: (and (= refinement!sum (- 100)) (= original!sum 101))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum (- 100)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 100)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 100)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum (- 100)) (= original!sum 101))"]
[PIE] Examining features of length 1
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 101 ) (define-fun refinement!sum () Int (- 100 ) ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 100)) (= original!sum 101)) (<= original!sum 0))) )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 100)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= original!sum 0))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[PIE] Learning boolean formula
[PIE] Boolean learning: looking at clauses up to size 1...
[PIE] Learned boolean expression: (and (<= (+ original!sum refinement!sum) 1) (<= original!sum 0))
[PIE] vPreGen candidate precondition: (and (<= (+ original!sum refinement!sum) 1) (<= original!sum 0))
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (<= (+ original!sum refinement!sum) 1) (<= original!sum 0)) (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum)))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!sum () Int 101 ) (define-fun original!sum () Int (- 100 ) ) )
[send->] (exit )
[PIE] vPreGen found counterexample: (and (= refinement!sum 101) (= original!sum (- 100)))
[PIE] Starting vPreGen pass
[PIE]   goal: (=> (not (and (<= refinement!sum 100) (<= original!sum 100))) (= original!sum refinement!sum))
[PIE]   good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   bad tests: ["(and (= refinement!sum 101) (= original!sum (- 100)))","(and (= refinement!sum (- 100)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum (- 100)))","(and (= refinement!sum (- 100)) (= original!sum 101))","(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[PIE] Examining features of length 3
[PIE] Examining features of length 4
[PIE] Reducing conflict set in bad tests
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum 0))","(and (= refinement!sum 101) (= original!sum 102))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[send->] (set-option :print-success true )
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[send->] (set-option :print-success true )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!original!retVal Int)
[<-recv] success
[send->] (declare-const original!r Int)
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (declare-const refinement!refinement!retVal Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum (- 100))) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum (- 100)) (= original!sum 101)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
[send->] (set-option :print-success true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 0)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun original!sum () Int 0 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[send->] (set-option :print-success true )
[<-recv] (model (define-fun original!sum () Int 102 ) (define-fun refinement!sum () Int 101 ) )
[send->] (exit )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!sum Int)
[<-recv] success
[send->] (declare-const refinement!sum Int)
[<-recv] success
[send->] (assert (not (=> (and (= refinement!sum 101) (= original!sum 102)) (<= (+ original!sum refinement!sum) 1))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[PIE] Beginning feature learning pass
[PIE]   Names: fromList ["(original!original!retVal Int)","(original!r Int)","(original!sum Int)","(refinement!r Int)","(refinement!refinement!retVal Int)","(refinement!sum Int)"]
[PIE]   Lits: fromList []
[PIE]   Good tests: ["(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r -1) (= refinement!refinement!retVal -1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 0) (= refinement!refinement!retVal 0) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal -1) (= original!r -1) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 0) (= original!r 0) (= original!sum 0)))","(and (and (= refinement!r 1) (= refinement!refinement!retVal 1) (= refinement!sum 0)) (and (= original!original!retVal 1) (= original!r 1) (= original!sum 0)))"]
[PIE]   Bad tests: ["(and (= refinement!sum 101) (= original!sum (- 100)))","(and (= refinement!sum (- 100)) (= original!sum 101))"]
[PIE] Examining features of length 1
[PIE] Examining features of length 2

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Universal Programs
[ ImpSeq
    [ ImpAsgn Name { nHandle = "refinement!sum" , nId = 0 } (ALit 0)
    , ImpWhile
        (BLe
           (AVar Name { nHandle = "refinement!sum" , nId = 0 }) (ALit 100))
        ImpSeq
        [ SpecCall
            { sc_callId = "refinement!biggerRand"
            , sc_args = []
            , sc_assignees = [ Name { nHandle = "refinement!r" , nId = 0 } ]
            }
        , ImpAsgn
            Name { nHandle = "refinement!sum" , nId = 0 }
            (AAdd
               (AVar Name { nHandle = "refinement!sum" , nId = 0 })
               (AVar Name { nHandle = "refinement!r" , nId = 0 }))
        ]
        ImpWhileMetadata
          { iwm_invariant =
              Just
                (Eq
                   (Var
                      TypedName
                        { tnName = Name { nHandle = "refinement!original!sum" , nId = 0 }
                        , tnType = Int
                        })
                   (Var
                      TypedName
                        { tnName = Name { nHandle = "refinement!refinement!sum" , nId = 0 }
                        , tnType = Int
                        }))
          , iwm_measure = Nothing
          , iwm_testStates = Nothing
          }
    , ImpAsgn
        Name { nHandle = "refinement!refinement!retVal" , nId = 0 }
        (AVar Name { nHandle = "refinement!sum" , nId = 0 })
    ]
]

:: Existential Programs
[ ImpSeq
    [ ImpAsgn Name { nHandle = "original!sum" , nId = 0 } (ALit 0)
    , ImpWhile
        (BLe (AVar Name { nHandle = "original!sum" , nId = 0 }) (ALit 100))
        ImpSeq
        [ SpecCall
            { sc_callId = "original!rand"
            , sc_args = []
            , sc_assignees = [ Name { nHandle = "original!r" , nId = 0 } ]
            }
        , ImpAsgn
            Name { nHandle = "original!sum" , nId = 0 }
            (AAdd
               (AVar Name { nHandle = "original!sum" , nId = 0 })
               (AVar Name { nHandle = "original!r" , nId = 0 }))
        ]
        ImpWhileMetadata
          { iwm_invariant =
              Just
                (Eq
                   (Var
                      TypedName
                        { tnName = Name { nHandle = "original!original!sum" , nId = 0 }
                        , tnType = Int
                        })
                   (Var
                      TypedName
                        { tnName = Name { nHandle = "original!refinement!sum" , nId = 0 }
                        , tnType = Int
                        }))
          , iwm_measure = Nothing
          , iwm_testStates = Nothing
          }
    , ImpAsgn
        Name { nHandle = "original!original!retVal" , nId = 0 }
        (AVar Name { nHandle = "original!sum" , nId = 0 })
    ]
]

:: Universal Specifications
fromList
  [ ( "refinement!biggerRand"
    , Specification
        { spec_params = []
        , spec_returnVars =
            [ Name { nHandle = "refinement!ret!" , nId = 0 } ]
        , spec_choiceVars = []
        , spec_preCondition = ATrue
        , spec_postCondition =
            And
              [ Lte
                  (Num 0)
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "refinement!ret!" , nId = 0 }
                       , tnType = Int
                       })
              , Lt
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "refinement!ret!" , nId = 0 }
                       , tnType = Int
                       })
                  (Num 11)
              ]
        }
    )
  ]

:: Existential Specifications
fromList
  [ ( "original!rand"
    , Specification
        { spec_params = []
        , spec_returnVars =
            [ Name { nHandle = "original!ret!" , nId = 0 } ]
        , spec_choiceVars =
            [ TypedName
                { tnName = Name { nHandle = "original!n" , nId = 0 }
                , tnType = Int
                }
            ]
        , spec_preCondition =
            And
              [ Lte
                  (Num 0)
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n" , nId = 0 }
                       , tnType = Int
                       })
              , Lt
                  (Var
                     TypedName
                       { tnName = Name { nHandle = "original!n" , nId = 0 }
                       , tnType = Int
                       })
                  (Num 10)
              ]
        , spec_postCondition =
            Eq
              (Var
                 TypedName
                   { tnName = Name { nHandle = "original!ret!" , nId = 0 }
                   , tnType = Int
                   })
              (Var
                 TypedName
                   { tnName = Name { nHandle = "original!n" , nId = 0 }
                   , tnType = Int
                   })
        }
    )
  ]

:: Precondition
ATrue

:: Postcondition
Eq
  (Var
     TypedName
       { tnName = Name { nHandle = "original!sum" , nId = 0 }
       , tnType = Int
       })
  (Var
     TypedName
       { tnName = Name { nHandle = "refinement!sum" , nId = 0 }
       , tnType = Int
       })

