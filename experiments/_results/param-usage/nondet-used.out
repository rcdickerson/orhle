Running backward relational analysis...

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  used[1A] (forall)
  used[2A] (forall)
  used[1B] (exists)
  used[2B] (exists)

:: Universal Programs
    --------
    used!1A!x := used!1A!param1 + used!1A!param2;
    used!1A!r := used!1A!flip();
    if used!1A!r == 0 then
      used!1A!ret := used!1A!x
    else
      used!1A!ret := used!1A!param1
    endif;
    used!1A!used!retVal := used!1A!ret;
    --------
    used!2A!x := used!2A!param1 + used!2A!param2;
    used!2A!r := used!2A!flip();
    if used!2A!r == 0 then
      used!2A!ret := used!2A!x
    else
      used!2A!ret := used!2A!param1
    endif;
    used!2A!used!retVal := used!2A!ret;

:: Existential Programs
    --------
    used!1B!x := used!1B!param1 + used!1B!param2;
    used!1B!r := used!1B!flip();
    if used!1B!r == 0 then
      used!1B!ret := used!1B!x
    else
      used!1B!ret := used!1B!param1
    endif;
    used!1B!used!retVal := used!1B!ret;
    --------
    used!2B!x := used!2B!param1 + used!2B!param2;
    used!2B!r := used!2B!flip();
    if used!2B!r == 0 then
      used!2B!ret := used!2B!x
    else
      used!2B!ret := used!2B!param1
    endif;
    used!2B!used!retVal := used!2B!ret;

:: Precondition
(and
 (= used!1A!param1 used!1B!param1)
 (not (= used!1A!param2 used!1B!param2))
 (not (= used!2A!param1 used!2B!param1))
 (= used!2A!param2 used!2B!param2))

:: Postcondition
(or (= used!1A!ret used!1B!ret) (= used!2A!ret used!2B!ret))

Failure:
  Verification conditions are invalid. Model: (model (define-fun used!2B!param2 () Int (- 1)) (define-fun used!1A!param2 () Int 3) (define-fun used!2A!param1 () Int 1) (define-fun used!1B!param2 () Int 4) (define-fun used!2B!param1 () Int 0) (define-fun used!2A!param2 () Int (- 1)) (define-fun used!1B!param1 () Int 0) (define-fun used!1A!param1 () Int 0))

real	0m0.230s
user	0m0.186s
sys	0m0.037s
