
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  used[1A] (forall)
  used[2A] (forall)
  used[1B] (exists)
  used[2B] (exists)

:: Universal Programs
[ SSeq
    [ SAsgn used !
        1A ! x (AAdd (AVar used ! 1A ! param1) (AVar used ! 1A ! param2))
    , SCall "used!1A!flip" [] [ used ! 1A ! r ]
    , SIf
        (BEq (AVar used ! 1A ! r) (ALit 0))
        (SAsgn used ! 1A ! ret (AVar used ! 1A ! x))
        (SAsgn used ! 1A ! ret (AVar used ! 1A ! param1))
    , SAsgn used ! 1A ! used ! retVal (AVar used ! 1A ! ret)
    ]
, SSeq
    [ SAsgn used !
        2A ! x (AAdd (AVar used ! 2A ! param1) (AVar used ! 2A ! param2))
    , SCall "used!2A!flip" [] [ used ! 2A ! r ]
    , SIf
        (BEq (AVar used ! 2A ! r) (ALit 0))
        (SAsgn used ! 2A ! ret (AVar used ! 2A ! x))
        (SAsgn used ! 2A ! ret (AVar used ! 2A ! param1))
    , SAsgn used ! 2A ! used ! retVal (AVar used ! 2A ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SAsgn used !
        1B ! x (AAdd (AVar used ! 1B ! param1) (AVar used ! 1B ! param2))
    , SCall "used!1B!flip" [] [ used ! 1B ! r ]
    , SIf
        (BEq (AVar used ! 1B ! r) (ALit 0))
        (SAsgn used ! 1B ! ret (AVar used ! 1B ! x))
        (SAsgn used ! 1B ! ret (AVar used ! 1B ! param1))
    , SAsgn used ! 1B ! used ! retVal (AVar used ! 1B ! ret)
    ]
, SSeq
    [ SAsgn used !
        2B ! x (AAdd (AVar used ! 2B ! param1) (AVar used ! 2B ! param2))
    , SCall "used!2B!flip" [] [ used ! 2B ! r ]
    , SIf
        (BEq (AVar used ! 2B ! r) (ALit 0))
        (SAsgn used ! 2B ! ret (AVar used ! 2B ! x))
        (SAsgn used ! 2B ! ret (AVar used ! 2B ! param1))
    , SAsgn used ! 2B ! used ! retVal (AVar used ! 2B ! ret)
    ]
]

:: Universal Specifications
fromList [("used!1A!flip",Spec {spec_params = [], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = Or [Eq (Var ret!) (Num 0),Eq (Var ret!) (Num 1)]}),("used!2A!flip",Spec {spec_params = [], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = Or [Eq (Var ret!) (Num 0),Eq (Var ret!) (Num 1)]})]

:: Existential Specifications
fromList [("used!1B!flip",Spec {spec_params = [], spec_choiceVars = [used!1B!n], spec_preCondition = Or [Eq (Var used!1B!n) (Num 0),Eq (Var used!1B!n) (Num 1)], spec_postCondition = Eq (Var ret!) (Var used!1B!n)}),("used!2B!flip",Spec {spec_params = [], spec_choiceVars = [used!2B!n], spec_preCondition = Or [Eq (Var used!2B!n) (Num 0),Eq (Var used!2B!n) (Num 1)], spec_postCondition = Eq (Var ret!) (Var used!2B!n)})]

:: Precondition
And
  [ Eq (Var used ! 1A ! param1) (Var used ! 1B ! param1)
  , Not (Eq (Var used ! 1A ! param2) (Var used ! 1B ! param2))
  , Not (Eq (Var used ! 2A ! param1) (Var used ! 2B ! param1))
  , Eq (Var used ! 2A ! param2) (Var used ! 2B ! param2)
  ]

:: Postcondition
Or
  [ Eq (Var used ! 1A ! ret) (Var used ! 1B ! ret)
  , Eq (Var used ! 2A ! ret) (Var used ! 2B ! ret)
  ]

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const used!1A!param1 Int)
[<-recv] success
[send->] (declare-const used!1A!param2 Int)
[<-recv] success
[send->] (declare-const used!1A!r!1 Int)
[<-recv] success
[send->] (declare-const used!1B!param1 Int)
[<-recv] success
[send->] (declare-const used!1B!param2 Int)
[<-recv] success
[send->] (declare-const used!2A!param1 Int)
[<-recv] success
[send->] (declare-const used!2A!param2 Int)
[<-recv] success
[send->] (declare-const used!2A!r!1 Int)
[<-recv] success
[send->] (declare-const used!2B!param1 Int)
[<-recv] success
[send->] (declare-const used!2B!param2 Int)
[<-recv] success
[send->] (assert (not (=> (and (= used!1A!param1 used!1B!param1) (not (= used!1A!param2 used!1B!param2)) (not (= used!2A!param1 used!2B!param1)) (= used!2A!param2 used!2B!param2)) (exists ((used!2B!n!1 Int)) (and (or (= used!2B!n!1 0) (= used!2B!n!1 1)) (exists ((used!2B!r!1 Int)) (= used!2B!r!1 used!2B!n!1)) (forall ((used!2B!r!1 Int)) (=> (= used!2B!r!1 used!2B!n!1) (and (=> (= used!2B!r!1 0) (exists ((used!1B!n!1 Int)) (and (or (= used!1B!n!1 0) (= used!1B!n!1 1)) (exists ((used!1B!r!1 Int)) (= used!1B!r!1 used!1B!n!1)) (forall ((used!1B!r!1 Int)) (=> (= used!1B!r!1 used!1B!n!1) (and (=> (= used!1B!r!1 0) (and true (=> (or (= used!2A!r!1 0) (= used!2A!r!1 1)) (and (=> (= used!2A!r!1 0) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) (+ used!1B!param1 used!1B!param2)) (= (+ used!2A!param1 used!2A!param2) (+ used!2B!param1 used!2B!param2)))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 (+ used!1B!param1 used!1B!param2)) (= (+ used!2A!param1 used!2A!param2) (+ used!2B!param1 used!2B!param2)))))))) (=> (not (= used!2A!r!1 0)) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) (+ used!1B!param1 used!1B!param2)) (= used!2A!param1 (+ used!2B!param1 used!2B!param2)))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 (+ used!1B!param1 used!1B!param2)) (= used!2A!param1 (+ used!2B!param1 used!2B!param2)))))))))))) (=> (not (= used!1B!r!1 0)) (and true (=> (or (= used!2A!r!1 0) (= used!2A!r!1 1)) (and (=> (= used!2A!r!1 0) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) used!1B!param1) (= (+ used!2A!param1 used!2A!param2) (+ used!2B!param1 used!2B!param2)))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 used!1B!param1) (= (+ used!2A!param1 used!2A!param2) (+ used!2B!param1 used!2B!param2)))))))) (=> (not (= used!2A!r!1 0)) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) used!1B!param1) (= used!2A!param1 (+ used!2B!param1 used!2B!param2)))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 used!1B!param1) (= used!2A!param1 (+ used!2B!param1 used!2B!param2)))))))))))))))))) (=> (not (= used!2B!r!1 0)) (exists ((used!1B!n!1 Int)) (and (or (= used!1B!n!1 0) (= used!1B!n!1 1)) (exists ((used!1B!r!1 Int)) (= used!1B!r!1 used!1B!n!1)) (forall ((used!1B!r!1 Int)) (=> (= used!1B!r!1 used!1B!n!1) (and (=> (= used!1B!r!1 0) (and true (=> (or (= used!2A!r!1 0) (= used!2A!r!1 1)) (and (=> (= used!2A!r!1 0) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) (+ used!1B!param1 used!1B!param2)) (= (+ used!2A!param1 used!2A!param2) used!2B!param1))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 (+ used!1B!param1 used!1B!param2)) (= (+ used!2A!param1 used!2A!param2) used!2B!param1))))))) (=> (not (= used!2A!r!1 0)) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) (+ used!1B!param1 used!1B!param2)) (= used!2A!param1 used!2B!param1))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 (+ used!1B!param1 used!1B!param2)) (= used!2A!param1 used!2B!param1))))))))))) (=> (not (= used!1B!r!1 0)) (and true (=> (or (= used!2A!r!1 0) (= used!2A!r!1 1)) (and (=> (= used!2A!r!1 0) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) used!1B!param1) (= (+ used!2A!param1 used!2A!param2) used!2B!param1))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 used!1B!param1) (= (+ used!2A!param1 used!2A!param2) used!2B!param1))))))) (=> (not (= used!2A!r!1 0)) (and true (=> (or (= used!1A!r!1 0) (= used!1A!r!1 1)) (and (=> (= used!1A!r!1 0) (or (= (+ used!1A!param1 used!1A!param2) used!1B!param1) (= used!2A!param1 used!2B!param1))) (=> (not (= used!1A!r!1 0)) (or (= used!1A!param1 used!1B!param1) (= used!2A!param1 used!2B!param1)))))))))))))))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun used!1A!r!1 () Int 0 ) (define-fun used!1A!param2 () Int 6 ) (define-fun used!2B!param2 () Int (- 2 ) ) (define-fun used!2A!param1 () Int 0 ) (define-fun used!2A!r!1 () Int 1 ) (define-fun used!1B!param2 () Int 2 ) (define-fun used!2B!param1 () Int (- 1 ) ) (define-fun used!2A!param2 () Int (- 2 ) ) (define-fun used!1B!param1 () Int 0 ) (define-fun used!1A!param1 () Int 0 ) )
[send->] (exit )
Failure:
  Verification conditions are invalid. Model: (model (define-fun used!1A!r!1 () Int 0 ) (define-fun used!1A!param2 () Int 6 ) (define-fun used!2B!param2 () Int (- 2 ) ) (define-fun used!2A!param1 () Int 0 ) (define-fun used!2A!r!1 () Int 1 ) (define-fun used!1B!param2 () Int 2 ) (define-fun used!2B!param1 () Int (- 1 ) ) (define-fun used!2A!param2 () Int (- 2 ) ) (define-fun used!1B!param1 () Int 0 ) (define-fun used!1A!param1 () Int 0 ) )

real	0m0.188s
user	0m0.168s
sys	0m0.034s
