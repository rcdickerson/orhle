
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  unused[1A] (forall)
  unused[2A] (forall)
  unused[1B] (exists)
  unused[2B] (exists)

:: Universal Programs
[ SSeq
    [ SAsgn unused !
        1A !
        x (AAdd (AVar unused ! 1A ! param1) (AVar unused ! 1A ! param2))
    , SAsgn unused !
        1A ! y (ASub (AVar unused ! 1A ! x) (AVar unused ! 1A ! param2))
    , SAsgn unused ! 1A ! ret (AVar unused ! 1A ! y)
    , SAsgn unused ! 1A ! unused ! retVal (AVar unused ! 1A ! ret)
    ]
, SSeq
    [ SAsgn unused !
        2A !
        x (AAdd (AVar unused ! 2A ! param1) (AVar unused ! 2A ! param2))
    , SAsgn unused !
        2A ! y (ASub (AVar unused ! 2A ! x) (AVar unused ! 2A ! param2))
    , SAsgn unused ! 2A ! ret (AVar unused ! 2A ! y)
    , SAsgn unused ! 2A ! unused ! retVal (AVar unused ! 2A ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SAsgn unused !
        1B !
        x (AAdd (AVar unused ! 1B ! param1) (AVar unused ! 1B ! param2))
    , SAsgn unused !
        1B ! y (ASub (AVar unused ! 1B ! x) (AVar unused ! 1B ! param2))
    , SAsgn unused ! 1B ! ret (AVar unused ! 1B ! y)
    , SAsgn unused ! 1B ! unused ! retVal (AVar unused ! 1B ! ret)
    ]
, SSeq
    [ SAsgn unused !
        2B !
        x (AAdd (AVar unused ! 2B ! param1) (AVar unused ! 2B ! param2))
    , SAsgn unused !
        2B ! y (ASub (AVar unused ! 2B ! x) (AVar unused ! 2B ! param2))
    , SAsgn unused ! 2B ! ret (AVar unused ! 2B ! y)
    , SAsgn unused ! 2B ! unused ! retVal (AVar unused ! 2B ! ret)
    ]
]

:: Universal Specifications
fromList []

:: Existential Specifications
fromList []

:: Precondition
And
  [ Eq (Var unused ! 1A ! param1) (Var unused ! 1B ! param1)
  , Not (Eq (Var unused ! 1A ! param2) (Var unused ! 1B ! param2))
  , Not (Eq (Var unused ! 2A ! param1) (Var unused ! 2B ! param1))
  , Eq (Var unused ! 2A ! param2) (Var unused ! 2B ! param2)
  ]

:: Postcondition
Or
  [ Eq (Var unused ! 1A ! ret) (Var unused ! 1B ! ret)
  , Eq (Var unused ! 2A ! ret) (Var unused ! 2B ! ret)
  ]

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const unused!1A!param1 Int)
[<-recv] success
[send->] (declare-const unused!1A!param2 Int)
[<-recv] success
[send->] (declare-const unused!1B!param1 Int)
[<-recv] success
[send->] (declare-const unused!1B!param2 Int)
[<-recv] success
[send->] (declare-const unused!2A!param1 Int)
[<-recv] success
[send->] (declare-const unused!2A!param2 Int)
[<-recv] success
[send->] (declare-const unused!2B!param1 Int)
[<-recv] success
[send->] (declare-const unused!2B!param2 Int)
[<-recv] success
[send->] (assert (not (=> (and (= unused!1A!param1 unused!1B!param1) (not (= unused!1A!param2 unused!1B!param2)) (not (= unused!2A!param1 unused!2B!param1)) (= unused!2A!param2 unused!2B!param2)) (or (= (- (+ unused!1A!param1 unused!1A!param2) unused!1A!param2) (- (+ unused!1B!param1 unused!1B!param2) unused!1B!param2)) (= (- (+ unused!2A!param1 unused!2A!param2) unused!2A!param2) (- (+ unused!2B!param1 unused!2B!param2) unused!2B!param2))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
Valid.

real	0m0.188s
user	0m0.167s
sys	0m0.026s
