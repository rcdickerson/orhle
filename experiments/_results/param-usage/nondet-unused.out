Running backward relational analysis...

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  unused[1A] (forall)
  unused[2A] (forall)
  unused[1B] (exists)
  unused[2B] (exists)

:: Universal Programs
    --------
    unused!1A!x := unused!1A!param1 + unused!1A!param2;
    unused!1A!r := unused!1A!flip();
    if unused!1A!r == 0 then
      unused!1A!ret := unused!1A!x - unused!1A!param2
    else
      unused!1A!ret := unused!1A!param1
    endif;
    unused!1A!unused!retVal := unused!1A!ret;
    --------
    unused!2A!x := unused!2A!param1 + unused!2A!param2;
    unused!2A!r := unused!2A!flip();
    if unused!2A!r == 0 then
      unused!2A!ret := unused!2A!x - unused!2A!param2
    else
      unused!2A!ret := unused!2A!param1
    endif;
    unused!2A!unused!retVal := unused!2A!ret;

:: Existential Programs
    --------
    unused!1B!x := unused!1B!param1 + unused!1B!param2;
    unused!1B!r := unused!1B!flip();
    if unused!1B!r == 0 then
      unused!1B!ret := unused!1B!x - unused!1B!param2
    else
      unused!1B!ret := unused!1B!param1
    endif;
    unused!1B!unused!retVal := unused!1B!ret;
    --------
    unused!2B!x := unused!2B!param1 + unused!2B!param2;
    unused!2B!r := unused!2B!flip();
    if unused!2B!r == 0 then
      unused!2B!ret := unused!2B!x - unused!2B!param2
    else
      unused!2B!ret := unused!2B!param1
    endif;
    unused!2B!unused!retVal := unused!2B!ret;

:: Precondition
(and
 (= unused!1A!param1 unused!1B!param1)
 (not (= unused!1A!param2 unused!1B!param2))
 (not (= unused!2A!param1 unused!2B!param1))
 (= unused!2A!param2 unused!2B!param2))

:: Postcondition
(or (= unused!1A!ret unused!1B!ret) (= unused!2A!ret unused!2B!ret))

Valid.

real	0m0.228s
user	0m0.205s
sys	0m0.017s
