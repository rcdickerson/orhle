
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  smith[1] (forall)
  smith[2] (exists)

:: Universal Programs
[ SSeq
    [ SIf
        (BEq (AMod (AVar smith ! 1 ! secret) (ALit 2)) (ALit 0))
        (SAsgn smith ! 1 ! ret (ALit 0))
        (SAsgn smith ! 1 ! ret (ALit 1))
    , SAsgn smith ! 1 ! smith ! retVal (AVar smith ! 1 ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SIf
        (BEq (AMod (AVar smith ! 2 ! secret) (ALit 2)) (ALit 0))
        (SAsgn smith ! 2 ! ret (ALit 0))
        (SAsgn smith ! 2 ! ret (ALit 1))
    , SAsgn smith ! 2 ! smith ! retVal (AVar smith ! 2 ! ret)
    ]
]

:: Universal Specifications
fromList []

:: Existential Specifications
fromList []

:: Precondition
ATrue

:: Postcondition
Eq (Var smith ! 1 ! ret) (Var smith ! 2 ! ret)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const smith!1!secret Int)
[<-recv] success
[send->] (declare-const smith!2!secret Int)
[<-recv] success
[send->] (assert (not (=> true (and (=> (= (mod smith!2!secret 2) 0) (and (=> (= (mod smith!1!secret 2) 0) (= 0 0)) (=> (not (= (mod smith!1!secret 2) 0)) (= 1 0)))) (=> (not (= (mod smith!2!secret 2) 0)) (and (=> (= (mod smith!1!secret 2) 0) (= 0 1)) (=> (not (= (mod smith!1!secret 2) 0)) (= 1 1))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun smith!1!secret () Int (- 2 ) ) (define-fun smith!2!secret () Int 3 ) )
[send->] (exit )
Failure:
  Verification conditions are invalid. Model: (model (define-fun smith!1!secret () Int (- 2 ) ) (define-fun smith!2!secret () Int 3 ) )

real	0m0.188s
user	0m0.166s
sys	0m0.021s
