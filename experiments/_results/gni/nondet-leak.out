Running backward relational analysis...

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  leak[1] (forall)
  leak[2] (exists)

:: Universal Programs
    --------
    leak!1!r := leak!1!randInt();
    if leak!1!r == 50 then
      leak!1!ret := leak!1!high + leak!1!low
    else
      leak!1!ret := leak!1!low
    endif;
    leak!1!leak!retVal := leak!1!ret;

:: Existential Programs
    --------
    leak!2!r := leak!2!randInt();
    if leak!2!r == 50 then
      leak!2!ret := leak!2!high + leak!2!low
    else
      leak!2!ret := leak!2!low
    endif;
    leak!2!leak!retVal := leak!2!ret;

:: Precondition
(= leak!1!low leak!2!low)

:: Postcondition
(and (= leak!1!low leak!2!low) (= leak!1!ret leak!2!ret))

Failure:
  Verification conditions are invalid. Model: (model (define-fun leak!2!high () Int 2) (define-fun leak!1!high () Int 3) (define-fun leak!2!low () Int 0) (define-fun leak!1!low () Int 0))

real	0m0.231s
user	0m0.180s
sys	0m0.047s
