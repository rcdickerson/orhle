
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  run[1] (forall)
  run[2] (exists)

:: Universal Programs
[ SSeq
    [ SCall "run!1!flipCoin" [] [ run ! 1 ! flip ]
    , SIf
        (BEq (AVar run ! 1 ! flip) (ALit 0))
        (SAsgn run !
           1 ! low (AAdd (AVar run ! 1 ! high) (AVar run ! 1 ! low)))
        SSkip
    , SAsgn run ! 1 ! run ! retVal (AVar run ! 1 ! low)
    ]
]

:: Existential Programs
[ SSeq
    [ SCall "run!2!flipCoin" [] [ run ! 2 ! flip ]
    , SIf
        (BEq (AVar run ! 2 ! flip) (ALit 0))
        (SAsgn run !
           2 ! low (AAdd (AVar run ! 2 ! high) (AVar run ! 2 ! low)))
        SSkip
    , SAsgn run ! 2 ! run ! retVal (AVar run ! 2 ! low)
    ]
]

:: Universal Specifications
fromList [("run!1!flipCoin",Spec {spec_params = [], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = Or [Eq (Var ret!) (Num 0),Eq (Var ret!) (Num 1)]})]

:: Existential Specifications
fromList [("run!2!flipCoin",Spec {spec_params = [], spec_choiceVars = [run!2!n], spec_preCondition = Or [Eq (Var run!2!n) (Num 0),Eq (Var run!2!n) (Num 1)], spec_postCondition = Eq (Var ret!) (Var run!2!n)})]

:: Precondition
Eq (Var run ! 1 ! low) (Var run ! 2 ! low)

:: Postcondition
Eq (Var run ! 1 ! low) (Var run ! 2 ! low)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const run!1!flip!1 Int)
[<-recv] success
[send->] (declare-const run!1!high Int)
[<-recv] success
[send->] (declare-const run!1!low Int)
[<-recv] success
[send->] (declare-const run!2!high Int)
[<-recv] success
[send->] (declare-const run!2!low Int)
[<-recv] success
[send->] (assert (not (=> (= run!1!low run!2!low) (exists ((run!2!n!1 Int)) (and (or (= run!2!n!1 0) (= run!2!n!1 1)) (exists ((run!2!flip!1 Int)) (= run!2!flip!1 run!2!n!1)) (forall ((run!2!flip!1 Int)) (=> (= run!2!flip!1 run!2!n!1) (and (=> (= run!2!flip!1 0) (and true (=> (or (= run!1!flip!1 0) (= run!1!flip!1 1)) (and (=> (= run!1!flip!1 0) (= (+ run!1!high run!1!low) (+ run!2!high run!2!low))) (=> (not (= run!1!flip!1 0)) (= run!1!low (+ run!2!high run!2!low))))))) (=> (not (= run!2!flip!1 0)) (and true (=> (or (= run!1!flip!1 0) (= run!1!flip!1 1)) (and (=> (= run!1!flip!1 0) (= (+ run!1!high run!1!low) run!2!low)) (=> (not (= run!1!flip!1 0)) (= run!1!low run!2!low))))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun run!1!flip!1 () Int 0 ) (define-fun run!2!high () Int 2 ) (define-fun run!1!high () Int 3 ) (define-fun run!2!low () Int 0 ) (define-fun run!1!low () Int 0 ) )
[send->] (exit )
Failure:
  Verification conditions are invalid. Model: (model (define-fun run!1!flip!1 () Int 0 ) (define-fun run!2!high () Int 2 ) (define-fun run!1!high () Int 3 ) (define-fun run!2!low () Int 0 ) (define-fun run!1!low () Int 0 ) )

real	0m0.187s
user	0m0.187s
sys	0m0.004s
