Running backward relational analysis...

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  cond[1] (forall)
  cond[2] (forall)
  cond[3] (exists)

:: Universal Programs
    --------
    if cond!1!l == 0 then
      cond!1!ret := cond!1!h1 % 2
    else
      cond!1!ret := cond!1!h1 % 2
    endif;
    cond!1!cond!retVal := cond!1!ret;
    --------
    if cond!2!l == 0 then
      cond!2!ret := cond!2!h1 % 2
    else
      cond!2!ret := cond!2!h1 % 2
    endif;
    cond!2!cond!retVal := cond!2!ret;

:: Existential Programs
    --------
    if cond!3!l == 0 then
      cond!3!ret := cond!3!h1 % 2
    else
      cond!3!ret := cond!3!h1 % 2
    endif;
    cond!3!cond!retVal := cond!3!ret;

:: Precondition
(and
 (= cond!1!h1 cond!3!h1)
 (= cond!1!h2 cond!3!h2)
 (= cond!1!l cond!2!l)
 (= cond!2!l cond!3!l)
 (=>
 (= cond!1!l 0)
 (and
 (= (mod cond!1!h1 2) (mod cond!2!h1 2))
 (= (mod cond!2!h1 2) (mod cond!3!h1 2))))
 (=>
 (not (= cond!1!l 0))
 (and
 (= (mod cond!1!h2 2) (mod cond!2!h2 2))
 (= (mod cond!2!h2 2) (mod cond!3!h2 2)))))

:: Postcondition
(= cond!2!ret cond!3!ret)

Failure:
  Verification conditions are invalid. Model: (model (define-fun cond!2!h2 () Int 0) (define-fun cond!2!h1 () Int 0) (define-fun cond!3!h2 () Int 0) (define-fun cond!3!h1 () Int 1) (define-fun cond!3!l () Int 1) (define-fun cond!1!l () Int 1) (define-fun cond!2!l () Int 1) (define-fun cond!1!h2 () Int 0) (define-fun cond!1!h1 () Int 1))

real	0m0.209s
user	0m0.178s
sys	0m0.027s
