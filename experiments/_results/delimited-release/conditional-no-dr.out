
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  cond[1] (forall)
  cond[2] (forall)
  cond[3] (exists)

:: Universal Programs
[ SSeq
    [ SIf
        (BEq (AVar cond ! 1 ! l) (ALit 0))
        (SAsgn cond ! 1 ! ret (AMod (AVar cond ! 1 ! h1) (ALit 2)))
        (SAsgn cond ! 1 ! ret (AMod (AVar cond ! 1 ! h2) (ALit 2)))
    , SAsgn cond ! 1 ! cond ! retVal (AVar cond ! 1 ! ret)
    ]
, SSeq
    [ SIf
        (BEq (AVar cond ! 2 ! l) (ALit 0))
        (SAsgn cond ! 2 ! ret (AMod (AVar cond ! 2 ! h1) (ALit 2)))
        (SAsgn cond ! 2 ! ret (AMod (AVar cond ! 2 ! h2) (ALit 2)))
    , SAsgn cond ! 2 ! cond ! retVal (AVar cond ! 2 ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SIf
        (BEq (AVar cond ! 3 ! l) (ALit 0))
        (SAsgn cond ! 3 ! ret (AMod (AVar cond ! 3 ! h1) (ALit 2)))
        (SAsgn cond ! 3 ! ret (AMod (AVar cond ! 3 ! h2) (ALit 2)))
    , SAsgn cond ! 3 ! cond ! retVal (AVar cond ! 3 ! ret)
    ]
]

:: Universal Specifications
fromList []

:: Existential Specifications
fromList []

:: Precondition
And
  [ Eq (Var cond ! 1 ! h1) (Var cond ! 3 ! h1)
  , Eq (Var cond ! 1 ! h2) (Var cond ! 3 ! h2)
  , Eq (Var cond ! 1 ! l) (Var cond ! 2 ! l)
  , Eq (Var cond ! 2 ! l) (Var cond ! 3 ! l)
  ]

:: Postcondition
Eq (Var cond ! 2 ! ret) (Var cond ! 3 ! ret)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const cond!1!h1 Int)
[<-recv] success
[send->] (declare-const cond!1!h2 Int)
[<-recv] success
[send->] (declare-const cond!1!l Int)
[<-recv] success
[send->] (declare-const cond!2!h1 Int)
[<-recv] success
[send->] (declare-const cond!2!h2 Int)
[<-recv] success
[send->] (declare-const cond!2!l Int)
[<-recv] success
[send->] (declare-const cond!3!h1 Int)
[<-recv] success
[send->] (declare-const cond!3!h2 Int)
[<-recv] success
[send->] (declare-const cond!3!l Int)
[<-recv] success
[send->] (assert (not (=> (and (= cond!1!h1 cond!3!h1) (= cond!1!h2 cond!3!h2) (= cond!1!l cond!2!l) (= cond!2!l cond!3!l)) (and (=> (= cond!3!l 0) (and (=> (= cond!2!l 0) (and (=> (= cond!1!l 0) (= (mod cond!2!h1 2) (mod cond!3!h1 2))) (=> (not (= cond!1!l 0)) (= (mod cond!2!h1 2) (mod cond!3!h1 2))))) (=> (not (= cond!2!l 0)) (and (=> (= cond!1!l 0) (= (mod cond!2!h2 2) (mod cond!3!h1 2))) (=> (not (= cond!1!l 0)) (= (mod cond!2!h2 2) (mod cond!3!h1 2))))))) (=> (not (= cond!3!l 0)) (and (=> (= cond!2!l 0) (and (=> (= cond!1!l 0) (= (mod cond!2!h1 2) (mod cond!3!h2 2))) (=> (not (= cond!1!l 0)) (= (mod cond!2!h1 2) (mod cond!3!h2 2))))) (=> (not (= cond!2!l 0)) (and (=> (= cond!1!l 0) (= (mod cond!2!h2 2) (mod cond!3!h2 2))) (=> (not (= cond!1!l 0)) (= (mod cond!2!h2 2) (mod cond!3!h2 2)))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun cond!2!h2 () Int (- 2 ) ) (define-fun cond!3!h2 () Int (- 3 ) ) (define-fun cond!3!l () Int 1 ) (define-fun cond!1!l () Int 1 ) (define-fun cond!2!l () Int 1 ) (define-fun cond!1!h2 () Int (- 3 ) ) (define-fun cond!3!h1 () Int 0 ) (define-fun cond!1!h1 () Int 0 ) (define-fun cond!2!h1 () Int 0 ) )
[send->] (exit )
Failure:
  Verification conditions are invalid. Model: (model (define-fun cond!2!h2 () Int (- 2 ) ) (define-fun cond!3!h2 () Int (- 3 ) ) (define-fun cond!3!l () Int 1 ) (define-fun cond!1!l () Int 1 ) (define-fun cond!2!l () Int 1 ) (define-fun cond!1!h2 () Int (- 3 ) ) (define-fun cond!3!h1 () Int 0 ) (define-fun cond!1!h1 () Int 0 ) (define-fun cond!2!h1 () Int 0 ) )

real	0m0.189s
user	0m0.181s
sys	0m0.013s
