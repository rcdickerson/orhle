
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  run[1] (forall)
  run[2] (exists)

:: Universal Programs
[ SSeq
    [ SCall "run!1!parity" [ AVar run ! 1 ! h ] [ run ! 1 ! p ]
    , SIf
        (BEq (AVar run ! 1 ! p) (ALit 1))
        (SSeq [ SAsgn run ! 1 ! l (ALit 1) , SAsgn run ! 1 ! h (ALit 1) ])
        (SSeq [ SAsgn run ! 1 ! l (ALit 0) , SAsgn run ! 1 ! h (ALit 0) ])
    , SAsgn run ! 1 ! run ! retVal (ALit 0)
    ]
]

:: Existential Programs
[ SSeq
    [ SCall "run!2!parity" [ AVar run ! 2 ! h ] [ run ! 2 ! p ]
    , SIf
        (BEq (AVar run ! 2 ! p) (ALit 1))
        (SSeq [ SAsgn run ! 2 ! l (ALit 1) , SAsgn run ! 2 ! h (ALit 1) ])
        (SSeq [ SAsgn run ! 2 ! l (ALit 0) , SAsgn run ! 2 ! h (ALit 0) ])
    , SAsgn run ! 2 ! run ! retVal (ALit 0)
    ]
]

:: Universal Specifications
fromList [("run!1!parity",Spec {spec_params = [run!1!val], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = Eq (Var ret!) (Mod (Var run!1!val) (Num 2))})]

:: Existential Specifications
fromList [("run!2!parity",Spec {spec_params = [run!2!val], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = Eq (Var ret!) (Mod (Var run!2!val) (Num 2))})]

:: Precondition
And
  [ Eq (Var run ! 1 ! l) (Var run ! 2 ! l)
  , Eq
      (Mod (Var run ! 1 ! h) (Num 2)) (Mod (Var run ! 2 ! h) (Num 2))
  ]

:: Postcondition
Eq (Var run ! 1 ! l) (Var run ! 2 ! l)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const run!1!h Int)
[<-recv] success
[send->] (declare-const run!1!l Int)
[<-recv] success
[send->] (declare-const run!1!p!1 Int)
[<-recv] success
[send->] (declare-const run!2!h Int)
[<-recv] success
[send->] (declare-const run!2!l Int)
[<-recv] success
[send->] (assert (not (=> (and (= run!1!l run!2!l) (= (mod run!1!h 2) (mod run!2!h 2))) (and true (exists ((run!2!p!1 Int)) (= run!2!p!1 (mod run!2!h 2))) (forall ((run!2!p!1 Int)) (=> (= run!2!p!1 (mod run!2!h 2)) (and (=> (= run!2!p!1 1) (and true (=> (= run!1!p!1 (mod run!1!h 2)) (and (=> (= run!1!p!1 1) (= 1 1)) (=> (not (= run!1!p!1 1)) (= 0 1)))))) (=> (not (= run!2!p!1 1)) (and true (=> (= run!1!p!1 (mod run!1!h 2)) (and (=> (= run!1!p!1 1) (= 1 0)) (=> (not (= run!1!p!1 1)) (= 0 0)))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
[send->] (exit )
Valid.

real	0m0.188s
user	0m0.188s
sys	0m0.006s
