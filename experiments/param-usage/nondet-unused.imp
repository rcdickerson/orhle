// A non-deterministic program that doesn't use one of its parameters.

expected: valid;

forall: unused[1A], unused[2A];
exists: unused[1B], unused[2B];

pre: (and
        // In 1A / 1B, fix param1
             (= unused!1A!param1 unused!1B!param1)
        (not (= unused!1A!param2 unused!1B!param2))

        // In 2A / 2B, fix param2
        (not (= unused!2A!param1 unused!2B!param1))
             (= unused!2A!param2 unused!2B!param2));

post: (or
        (= unused!1A!ret unused!1B!ret)
        (= unused!2A!ret unused!2B!ret));

aspecs:
  flip() {
    pre: true;
    post: (or (= ret! 0) (= ret! 1));
  }

especs:
  flip() {
    choiceVars: n;
    pre: (or (= n 0) (= n 1));
    post: (= ret! n);
  }

fun unused(param1, param2) {
  x := param1 + param2;
  r := flip();
  if (r == 0) then
    ret := x - param2;
  else
    ret := param1;
  endif
  return ret;
}