expected: valid;

forall: refinement;
exists: original;

pre:  (and
        (= original!list_0 refinement!list_0)
        (= original!list_1 refinement!list_1)
        (= original!list_2 refinement!list_2));
post: (and
        (= original!ret_0 refinement!ret_0)
        (= original!ret_1 refinement!ret_1)
        (= original!ret_2 refinement!ret_2));

aspecs:
  sort(list) {
    post: (and (<= ret!0 ret!1)
               (<= ret!1 ret!2)
               (or (and (= ret!0 list_0)
                        (= ret!1 list_1)
                        (= ret!2 list_2))
                   (and (= ret!0 list_0)
                        (= ret!1 list_2)
                        (= ret!2 list_1))
                   (and (= ret!0 list_1)
                        (= ret!1 list_0)
                        (= ret!2 list_2))
                   (and (= ret!0 list_1)
                        (= ret!1 list_2)
                        (= ret!2 list_0))
                   (and (= ret!0 list_2)
                        (= ret!1 list_0)
                        (= ret!2 list_1))
                   (and (= ret!0 list_2)
                        (= ret!1 list_1)
                        (= ret!2 list_0))));
  }

especs:
  shuffle(list) {
    choiceVars: n0, n1, n2;
    pre: (or (and (= n0 list_0)
                  (= n1 list_1)
                  (= n2 list_2))
             (and (= n0 list_0)
                  (= n1 list_2)
                  (= n2 list_1))
             (and (= n0 list_1)
                  (= n1 list_0)
                  (= n2 list_2))
             (and (= n0 list_1)
                  (= n1 list_2)
                  (= n2 list_0))
             (and (= n0 list_2)
                  (= n1 list_0)
                  (= n2 list_1))
             (and (= n0 list_2)
                  (= n1 list_1)
                  (= n2 list_0)));
    post: (and (= ret!0 n0)
               (= ret!1 n1)
               (= ret!2 n2));
  }

// The original program shuffles the list to some
// arbitrary permutation then adds three to each value.
fun original(list[3]) {
  shuffled[3] := shuffle(list[3]);
  ret_0 := shuffled_0 + 3;
  ret_1 := shuffled_1 + 3;
  ret_2 := shuffled_2 + 3;
  return ret;
}

// The refinement program sorts the list then adds three
// to each value.
fun refinement(list[3]) {
  sorted[3] := sort(list[3]);
  ret_0 := sorted_0 + 3;
  ret_1 := sorted_1 + 3;
  ret_2 := sorted_2 + 3;
  return ret;
}
