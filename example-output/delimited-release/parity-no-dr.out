
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  parity[1] (forall)
  parity[2] (exists)

:: Universal Programs
[ SSeq
    [ SAsgn parity ! 1 ! h (AMod (AVar parity ! 1 ! h) (ALit 2))
    , SIf
        (BEq (AVar parity ! 1 ! h) (ALit 1))
        (SSeq
           [ SAsgn parity ! 1 ! l (ALit 1) , SAsgn parity ! 1 ! h (ALit 1) ])
        (SSeq
           [ SAsgn parity ! 1 ! l (ALit 0) , SAsgn parity ! 1 ! h (ALit 0) ])
    , SAsgn parity ! 1 ! retVal (ALit 0)
    ]
]

:: Existential Programs
[ SSeq
    [ SAsgn parity ! 2 ! h (AMod (AVar parity ! 2 ! h) (ALit 2))
    , SIf
        (BEq (AVar parity ! 2 ! h) (ALit 1))
        (SSeq
           [ SAsgn parity ! 2 ! l (ALit 1) , SAsgn parity ! 2 ! h (ALit 1) ])
        (SSeq
           [ SAsgn parity ! 2 ! l (ALit 0) , SAsgn parity ! 2 ! h (ALit 0) ])
    , SAsgn parity ! 2 ! retVal (ALit 0)
    ]
]

:: Universal Specifications
fromList []

:: Existential Specifications
fromList []

:: Precondition
Eq (Var parity ! 1 ! l) (Var parity ! 2 ! l)

:: Postcondition
Eq (Var parity ! 1 ! l) (Var parity ! 2 ! l)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const parity!1!h Int)
[<-recv] success
[send->] (declare-const parity!1!l Int)
[<-recv] success
[send->] (declare-const parity!2!h Int)
[<-recv] success
[send->] (declare-const parity!2!l Int)
[<-recv] success
[send->] (assert (not (=> (= parity!1!l parity!2!l)
         (and (=> (= (mod parity!1!h 2) 1)
                  (and (=> (= (mod parity!2!h 2) 1) (= 1 1))
                       (=> (not (= (mod parity!2!h 2) 1)) (= 1 0))))
              (=> (not (= (mod parity!1!h 2) 1))
                  (and (=> (= (mod parity!2!h 2) 1) (= 0 1))
                       (=> (not (= (mod parity!2!h 2) 1)) (= 0 0))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun parity!2!h () Int (- 3 ) ) (define-fun parity!1!h () Int 2 ) (define-fun parity!2!l () Int 0 ) (define-fun parity!1!l () Int 0 ) )
Failure:
  (model (define-fun parity!2!h () Int (- 3 ) ) (define-fun parity!1!h () Int 2 ) (define-fun parity!2!l () Int 0 ) (define-fun parity!1!l () Int 0 ) )

real	0m0.201s
user	0m0.200s
sys	0m0.000s
