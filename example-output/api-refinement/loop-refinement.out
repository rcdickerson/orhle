
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Universal Programs
[ SSeq
    [ SAsgn refinement ! sum (ALit 0)
    , SWhile
        (BLe (AVar refinement ! sum) (ALit 100))
        (SSeq
           [ SCall "refinement!randOdd" [] [ refinement ! r ]
           , SAsgn refinement !
               sum (AAdd (AVar refinement ! sum) (AVar refinement ! r))
           ])
        ( And
            [ Lte (Num 0) (Var refinement ! sum)
            , Lt (Var refinement ! sum) (Num 110)
            ]
        , Num 0
        )
    , SAsgn refinement ! retVal (AVar refinement ! sum)
    ]
]

:: Existential Programs
[ SSeq
    [ SAsgn original ! sum (ALit 0)
    , SWhile
        (BLe (AVar original ! sum) (ALit 100))
        (SSeq
           [ SCall "original!rand" [] [ original ! r ]
           , SAsgn original !
               sum (AAdd (AVar original ! sum) (AVar original ! r))
           ])
        ( Imp
            (Gt (Var original ! sum) (Num 100))
            (Eq (Var original ! sum) (Var refinement ! sum))
        , Sub [ Num 110 , Var original ! sum ]
        )
    , SAsgn original ! retVal (AVar original ! sum)
    ]
]

:: Universal Specifications
fromList [("refinement!randOdd",Spec {spec_params = [], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = And [Lte (Num 0) (Var ret!),Lt (Var ret!) (Num 10),Eq (Mod (Var ret!) (Num 2)) (Num 1)]})]

:: Existential Specifications
fromList [("original!rand",Spec {spec_params = [], spec_choiceVars = [original!n], spec_preCondition = And [Lte (Num 0) (Var original!n),Lt (Var original!n) (Num 10)], spec_postCondition = Eq (Var ret!) (Var original!n)})]

:: Precondition
ATrue

:: Postcondition
Eq (Var original ! sum) (Var refinement ! sum)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (assert (not (=> true
         (and (and (<= 0 0) (< 0 110))
              (forall ((refinement!r!1 Int) (refinement!sum!1 Int))
                 (=> (and (<= refinement!sum!1 100)
                          (and (<= 0 refinement!sum!1) (< refinement!sum!1 110)))
                     (and true
                          (=> (and (<= 0 refinement!r!1) (< refinement!r!1 10)
                                   (= (mod refinement!r!1 2) 1))
                              (and (<= 0 (+ refinement!sum!1 refinement!r!1))
                                   (< (+ refinement!sum!1 refinement!r!1) 110))))))
              (forall ((refinement!r!1 Int) (refinement!sum!1 Int))
                 (=> (and (not (<= refinement!sum!1 100))
                          (and (<= 0 refinement!sum!1) (< refinement!sum!1 110)))
                     (and (=> (> 0 100) (= 0 refinement!sum!1))
                          (forall ((original!r!1 Int) (original!sum!1 Int))
                             (=> (and (<= original!sum!1 100)
                                      (=> (> original!sum!1 100)
                                          (= original!sum!1 refinement!sum!1)))
                                 (exists ((original!n Int))
                                    (and (and (<= 0 original!n) (< original!n 10))
                                         (exists ((original!r!2 Int))
                                            (= original!r!2 original!n))
                                         (forall ((original!r!2 Int))
                                            (=> (= original!r!2 original!n)
                                                (and (=> (> (+ original!sum!1 original!r!2) 100)
                                                         (= (+ original!sum!1 original!r!2)
                                                            refinement!sum!1))
                                                     (< (- 110 (+ original!sum!1 original!r!2))
                                                        (- 110 original!sum!1)))))))))
                          (forall ((original!r!1 Int) (original!sum!1 Int))
                             (=> (and (not (<= original!sum!1 100))
                                      (=> (> original!sum!1 100)
                                          (= original!sum!1 refinement!sum!1)))
                                 (= original!sum!1 refinement!sum!1))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
Valid.

real	0m0.921s
user	0m0.182s
sys	0m0.031s
