Replacements: fromList [(original!r,original!r!1),(original!sum,original!sum!1)]
Replacements: fromList [(original!r,original!r!2)]
Replacements: fromList [(refinement!r,refinement!r!1),(refinement!sum,refinement!sum!1)]

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

Universal Programs:
[ SSeq [SAsgn refinement!sum (ALit 0),SWhile (BLe (AVar refinement!sum) (ALit 100)) (SSeq [SCall (SFun {fName = refinement!randOdd, fParams = []}) [refinement!r],SAsgn refinement!sum (AAdd (AVar refinement!sum) (AVar refinement!r))]) ((and (<= 0 refinement!sum) (< refinement!sum 110)),0)]
]

Existential Programs:
[ SSeq [SAsgn original!sum (ALit 0),SWhile (BLe (AVar original!sum) (ALit 100)) (SSeq [SCall (SFun {fName = original!rand, fParams = []}) [original!r],SAsgn original!sum (AAdd (AVar original!sum) (AVar original!r))]) ((=> (> original!sum 100) (= original!sum refinement!sum)),(- 110 original!sum))]
]

Universal Specifications:
fromList [(refinement!randOdd,Spec {params = [], choiceVars = [], preCondition = true, postCondition = (and (<= 0 ret!) (< ret! 10) (= (mod ret! 2) 1))})]

Existential Specifications:
fromList [(original!rand,Spec {params = [], choiceVars = [(original!n int)], preCondition = (and (<= 0 original!n) (< original!n 10)), postCondition = (= ret! original!n)})]

Precondition:
  true

Postcondition:
  (= original!sum refinement!sum)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (assert (not (=> true
         (and (and (<= 0 0) (< 0 110))
              (forall ((refinement!r!1 Int) (refinement!sum!1 Int))
                 (=> (and (<= refinement!sum!1 100)
                          (and (<= 0 refinement!sum!1) (< refinement!sum!1 110)))
                     (and true
                          (=> (and (<= 0 refinement!r!1) (< refinement!r!1 10)
                                   (= (mod refinement!r!1 2) 1))
                              (and (<= 0 (+ refinement!sum!1 refinement!r!1))
                                   (< (+ refinement!sum!1 refinement!r!1) 110))))))
              (forall ((refinement!r!1 Int) (refinement!sum!1 Int))
                 (=> (and (not (<= refinement!sum!1 100))
                          (and (<= 0 refinement!sum!1) (< refinement!sum!1 110)))
                     (and (=> (> 0 100) (= 0 refinement!sum!1))
                          (forall ((original!r!1 Int) (original!sum!1 Int))
                             (=> (and (<= original!sum!1 100)
                                      (=> (> original!sum!1 100)
                                          (= original!sum!1 refinement!sum!1)))
                                 (exists ((original!n Int))
                                    (and (and (<= 0 original!n) (< original!n 10))
                                         (exists ((original!r!2 Int))
                                            (= original!r!2 original!n))
                                         (forall ((original!r!2 Int))
                                            (=> (= original!r!2 original!n)
                                                (and (=> (> (+ original!sum!1 original!r!2) 100)
                                                         (= (+ original!sum!1 original!r!2)
                                                            refinement!sum!1))
                                                     (< (- 110 (+ original!sum!1 original!r!2))
                                                        (- 110 original!sum!1)))))))))
                          (forall ((original!r!1 Int) (original!sum!1 Int))
                             (=> (and (not (<= original!sum!1 100))
                                      (=> (> original!sum!1 100)
                                          (= original!sum!1 refinement!sum!1)))
                                 (= original!sum!1 refinement!sum!1))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unknown
Failure:
  Solver returned unknown

real	0m1.232s
user	0m0.121s
sys	0m0.090s
