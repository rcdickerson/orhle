*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Verification Conditions
  (=> (and (= original!list_0 refinement!list_0)
           (= original!list_1 refinement!list_1)
           (= original!list_2 refinement!list_2))
      (and true
           (=> (or (and (= refinement!shuffled_0 refinement!list_0)
                        (= refinement!shuffled_1 refinement!list_1)
                        (= refinement!shuffled_2 refinement!list_2))
                   (and (= refinement!shuffled_0 refinement!list_0)
                        (= refinement!shuffled_1 refinement!list_2)
                        (= refinement!shuffled_2 refinement!list_1))
                   (and (= refinement!shuffled_0 refinement!list_1)
                        (= refinement!shuffled_1 refinement!list_0)
                        (= refinement!shuffled_2 refinement!list_2))
                   (and (= refinement!shuffled_0 refinement!list_1)
                        (= refinement!shuffled_1 refinement!list_2)
                        (= refinement!shuffled_2 refinement!list_0))
                   (and (= refinement!shuffled_0 refinement!list_2)
                        (= refinement!shuffled_1 refinement!list_0)
                        (= refinement!shuffled_2 refinement!list_1))
                   (and (= refinement!shuffled_0 refinement!list_2)
                        (= refinement!shuffled_1 refinement!list_1)
                        (= refinement!shuffled_2 refinement!list_0)))
               (and (exists ((original!n0 Int)
                             (original!n1 Int)
                             (original!n2 Int))
                      (! (and (<= original!n0 original!n1)
                              (<= original!n1 original!n2)
                              (or (and (= original!n0 original!list_0)
                                       (= original!n1 original!list_1)
                                       (= original!n2 original!list_2))
                                  (and (= original!n0 original!list_0)
                                       (= original!n1 original!list_2)
                                       (= original!n2 original!list_1))
                                  (and (= original!n0 original!list_1)
                                       (= original!n1 original!list_0)
                                       (= original!n2 original!list_2))
                                  (and (= original!n0 original!list_1)
                                       (= original!n1 original!list_2)
                                       (= original!n2 original!list_0))
                                  (and (= original!n0 original!list_2)
                                       (= original!n1 original!list_0)
                                       (= original!n2 original!list_1))
                                  (and (= original!n0 original!list_2)
                                       (= original!n1 original!list_1)
                                       (= original!n2 original!list_0)))
                              (exists ((original!sorted_0!0 Int)
                                       (original!sorted_1!1 Int)
                                       (original!sorted_2!2 Int))
                                (! (and (= original!sorted_0!0 original!n0)
                                        (= original!sorted_1!1 original!n1)
                                        (= original!sorted_2!2 original!n2))
                                   :weight 0))
                              (forall ((original!sorted_0!0 Int)
                                       (original!sorted_1!1 Int)
                                       (original!sorted_2!2 Int))
                                (! (or (not (and (= original!sorted_0!0
                                                    original!n0)
                                                 (= original!sorted_1!1
                                                    original!n1)
                                                 (= original!sorted_2!2
                                                    original!n2)))
                                       (and (= original!sorted_0!0
                                               (+ (- 3) refinement!shuffled_0 3))
                                            (= original!sorted_1!1
                                               (+ (- 3) refinement!shuffled_1 3))
                                            (= original!sorted_2!2
                                               (+ (- 3) refinement!shuffled_2 3))))
                                   :weight 0)))
                         :weight 0))))))

Invalid. Model:
  original!list_0 -> 1
  original!list_1 -> 0
  original!list_2 -> 1
  refinement!list_0 -> 1
  refinement!list_1 -> 0
  refinement!list_2 -> 1
  refinement!shuffled_0 -> 1
  refinement!shuffled_1 -> 0
  refinement!shuffled_2 -> 1

real	0m0.090s
user	0m0.086s
sys	0m0.041s
