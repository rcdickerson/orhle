
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

:: Universal Programs
[ SSeq
    [ SCall
        "refinement!shuffle"
        [ AVar refinement ! list_0
        , AVar refinement ! list_1
        , AVar refinement ! list_2
        ]
        [ refinement ! shuffled_0
        , refinement ! shuffled_1
        , refinement ! shuffled_2
        ]
    , SAsgn refinement !
        ret_0 (AAdd (AVar refinement ! shuffled_0) (ALit 3))
    , SAsgn refinement !
        ret_1 (AAdd (AVar refinement ! shuffled_1) (ALit 3))
    , SAsgn refinement !
        ret_2 (AAdd (AVar refinement ! shuffled_2) (ALit 3))
    , SAsgn refinement ! retVal (AVar refinement ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SCall
        "original!sort"
        [ AVar original ! list_0
        , AVar original ! list_1
        , AVar original ! list_2
        ]
        [ original ! sorted_0 , original ! sorted_1 , original ! sorted_2 ]
    , SAsgn original ! ret_0 (AAdd (AVar original ! sorted_0) (ALit 3))
    , SAsgn original ! ret_1 (AAdd (AVar original ! sorted_1) (ALit 3))
    , SAsgn original ! ret_2 (AAdd (AVar original ! sorted_2) (ALit 3))
    , SAsgn original ! retVal (AVar original ! ret)
    ]
]

:: Universal Specifications
fromList
  [ ( "refinement!shuffle"
    , Spec
        { spec_params =
            [ refinement ! list_0 , refinement ! list_1 , refinement ! list_2 ]
        , spec_choiceVars = []
        , spec_preCondition = ATrue
        , spec_postCondition =
            Or
              [ And
                  [ Eq (Var ret) (Var refinement ! list_0)
                  , Eq (Var ret ! 1) (Var refinement ! list_1)
                  , Eq (Var ret ! 2) (Var refinement ! list_2)
                  ]
              , And
                  [ Eq (Var ret) (Var refinement ! list_0)
                  , Eq (Var ret ! 1) (Var refinement ! list_2)
                  , Eq (Var ret ! 2) (Var refinement ! list_1)
                  ]
              , And
                  [ Eq (Var ret) (Var refinement ! list_1)
                  , Eq (Var ret ! 1) (Var refinement ! list_0)
                  , Eq (Var ret ! 2) (Var refinement ! list_2)
                  ]
              , And
                  [ Eq (Var ret) (Var refinement ! list_1)
                  , Eq (Var ret ! 1) (Var refinement ! list_2)
                  , Eq (Var ret ! 2) (Var refinement ! list_0)
                  ]
              , And
                  [ Eq (Var ret) (Var refinement ! list_2)
                  , Eq (Var ret ! 1) (Var refinement ! list_0)
                  , Eq (Var ret ! 2) (Var refinement ! list_1)
                  ]
              , And
                  [ Eq (Var ret) (Var refinement ! list_2)
                  , Eq (Var ret ! 1) (Var refinement ! list_1)
                  , Eq (Var ret ! 2) (Var refinement ! list_0)
                  ]
              ]
        }
    )
  ]

:: Existential Specifications
fromList
  [ ( "original!sort"
    , Spec
        { spec_params =
            [ original ! list_0 , original ! list_1 , original ! list_2 ]
        , spec_choiceVars =
            [ original ! n0 , original ! n1 , original ! n2 ]
        , spec_preCondition =
            And
              [ Lte (Var original ! n0) (Var original ! n1)
              , Lte (Var original ! n1) (Var original ! n2)
              , Or
                  [ And
                      [ Eq (Var original ! n0) (Var original ! list_0)
                      , Eq (Var original ! n1) (Var original ! list_1)
                      , Eq (Var original ! n2) (Var original ! list_2)
                      ]
                  , And
                      [ Eq (Var original ! n0) (Var original ! list_0)
                      , Eq (Var original ! n1) (Var original ! list_2)
                      , Eq (Var original ! n2) (Var original ! list_1)
                      ]
                  , And
                      [ Eq (Var original ! n0) (Var original ! list_1)
                      , Eq (Var original ! n1) (Var original ! list_0)
                      , Eq (Var original ! n2) (Var original ! list_2)
                      ]
                  , And
                      [ Eq (Var original ! n0) (Var original ! list_1)
                      , Eq (Var original ! n1) (Var original ! list_2)
                      , Eq (Var original ! n2) (Var original ! list_0)
                      ]
                  , And
                      [ Eq (Var original ! n0) (Var original ! list_2)
                      , Eq (Var original ! n1) (Var original ! list_0)
                      , Eq (Var original ! n2) (Var original ! list_1)
                      ]
                  , And
                      [ Eq (Var original ! n0) (Var original ! list_2)
                      , Eq (Var original ! n1) (Var original ! list_1)
                      , Eq (Var original ! n2) (Var original ! list_0)
                      ]
                  ]
              ]
        , spec_postCondition =
            And
              [ Eq (Var ret) (Var original ! n0)
              , Eq (Var ret ! 1) (Var original ! n1)
              , Eq (Var ret ! 2) (Var original ! n2)
              ]
        }
    )
  ]

:: Precondition
And
  [ Eq (Var original ! list_0) (Var refinement ! list_0)
  , Eq (Var original ! list_1) (Var refinement ! list_1)
  , Eq (Var original ! list_2) (Var refinement ! list_2)
  ]

:: Postcondition
And
  [ Eq (Var original ! ret_0) (Var refinement ! ret_0)
  , Eq (Var original ! ret_1) (Var refinement ! ret_1)
  , Eq (Var original ! ret_2) (Var refinement ! ret_2)
  ]

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!list_0 Int)
[<-recv] success
[send->] (declare-const original!list_1 Int)
[<-recv] success
[send->] (declare-const original!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!list_0 Int)
[<-recv] success
[send->] (declare-const refinement!list_1 Int)
[<-recv] success
[send->] (declare-const refinement!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!shuffled_0 Int)
[<-recv] success
[send->] (declare-const refinement!shuffled_1 Int)
[<-recv] success
[send->] (declare-const refinement!shuffled_2 Int)
[<-recv] success
[send->] (assert (not (=> (and (= original!list_0 refinement!list_0)
              (= original!list_1 refinement!list_1)
              (= original!list_2 refinement!list_2))
         (and true
              (=> (or (and (= refinement!shuffled_0 refinement!list_0)
                           (= refinement!shuffled_1 refinement!list_1)
                           (= refinement!shuffled_2 refinement!list_2))
                      (and (= refinement!shuffled_0 refinement!list_0)
                           (= refinement!shuffled_1 refinement!list_2)
                           (= refinement!shuffled_2 refinement!list_1))
                      (and (= refinement!shuffled_0 refinement!list_1)
                           (= refinement!shuffled_1 refinement!list_0)
                           (= refinement!shuffled_2 refinement!list_2))
                      (and (= refinement!shuffled_0 refinement!list_1)
                           (= refinement!shuffled_1 refinement!list_2)
                           (= refinement!shuffled_2 refinement!list_0))
                      (and (= refinement!shuffled_0 refinement!list_2)
                           (= refinement!shuffled_1 refinement!list_0)
                           (= refinement!shuffled_2 refinement!list_1))
                      (and (= refinement!shuffled_0 refinement!list_2)
                           (= refinement!shuffled_1 refinement!list_1)
                           (= refinement!shuffled_2 refinement!list_0)))
                  (exists ((original!n0 Int) (original!n1 Int) (original!n2 Int))
                     (and (and (<= original!n0 original!n1) (<= original!n1 original!n2)
                               (or (and (= original!n0 original!list_0)
                                        (= original!n1 original!list_1)
                                        (= original!n2 original!list_2))
                                   (and (= original!n0 original!list_0)
                                        (= original!n1 original!list_2)
                                        (= original!n2 original!list_1))
                                   (and (= original!n0 original!list_1)
                                        (= original!n1 original!list_0)
                                        (= original!n2 original!list_2))
                                   (and (= original!n0 original!list_1)
                                        (= original!n1 original!list_2)
                                        (= original!n2 original!list_0))
                                   (and (= original!n0 original!list_2)
                                        (= original!n1 original!list_0)
                                        (= original!n2 original!list_1))
                                   (and (= original!n0 original!list_2)
                                        (= original!n1 original!list_1)
                                        (= original!n2 original!list_0))))
                          (exists ((original!sorted_0!1 Int) (original!sorted_1!1 Int)
                                   (original!sorted_2!1 Int))
                             (and (= original!sorted_0!1 original!n0)
                                  (= original!sorted_1!1 original!n1)
                                  (= original!sorted_2!1 original!n2)))
                          (forall ((original!sorted_0!1 Int) (original!sorted_1!1 Int)
                                   (original!sorted_2!1 Int))
                             (=> (and (= original!sorted_0!1 original!n0)
                                      (= original!sorted_1!1 original!n1)
                                      (= original!sorted_2!1 original!n2))
                                 (and (= (+ original!sorted_0!1 3) (+ refinement!shuffled_0 3))
                                      (= (+ original!sorted_1!1 3) (+ refinement!shuffled_1 3))
                                      (= (+ original!sorted_2!1 3)
                                         (+ refinement!shuffled_2 3))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!shuffled_2 () Int 0 ) (define-fun refinement!shuffled_0 () Int 0 ) (define-fun refinement!list_0 () Int 0 ) (define-fun refinement!shuffled_1 () Int 1 ) (define-fun refinement!list_1 () Int 0 ) (define-fun refinement!list_2 () Int 1 ) (define-fun original!list_2 () Int 1 ) (define-fun original!list_1 () Int 0 ) (define-fun original!list_0 () Int 0 ) )
Failure:
  (model (define-fun refinement!shuffled_2 () Int 0 ) (define-fun refinement!shuffled_0 () Int 0 ) (define-fun refinement!list_0 () Int 0 ) (define-fun refinement!shuffled_1 () Int 1 ) (define-fun refinement!list_1 () Int 0 ) (define-fun refinement!list_2 () Int 1 ) (define-fun original!list_2 () Int 1 ) (define-fun original!list_1 () Int 0 ) (define-fun original!list_0 () Int 0 ) )

real	0m0.213s
user	0m0.222s
sys	0m0.040s
