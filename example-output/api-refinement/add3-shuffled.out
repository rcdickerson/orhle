Replacements: fromList [(original!sorted_0,original!sorted_0!1),(original!sorted_1,original!sorted_1!1),(original!sorted_2,original!sorted_2!1)]

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

Universal Programs:
[ SSeq
    [ SCall
        SFun
          { fName = refinement ! shuffle
          , fParams =
              [ refinement ! list_0 , refinement ! list_1 , refinement ! list_2 ]
          }
        [ refinement ! shuffled_0
        , refinement ! shuffled_1
        , refinement ! shuffled_2
        ]
    , SAsgn refinement !
        ret_0 (AAdd (AVar refinement ! shuffled_0) (ALit 3))
    , SAsgn refinement !
        ret_1 (AAdd (AVar refinement ! shuffled_1) (ALit 3))
    , SAsgn refinement !
        ret_2 (AAdd (AVar refinement ! shuffled_2) (ALit 3))
    ]
]

Existential Programs:
[ SSeq
    [ SCall
        SFun
          { fName = original ! sort
          , fParams =
              [ original ! list_0 , original ! list_1 , original ! list_2 ]
          }
        [ original ! sorted_0 , original ! sorted_1 , original ! sorted_2 ]
    , SAsgn original ! ret_0 (AAdd (AVar original ! sorted_0) (ALit 3))
    , SAsgn original ! ret_1 (AAdd (AVar original ! sorted_1) (ALit 3))
    , SAsgn original ! ret_2 (AAdd (AVar original ! sorted_2) (ALit 3))
    ]
]

Universal Specifications:
fromList [(refinement!shuffle,Spec {params = [refinement!list_0,refinement!list_1,refinement!list_2], choiceVars = [], preCondition = true, postCondition = (or (and (= ret!0 refinement!list_0) (= ret!1 refinement!list_1) (= ret!2 refinement!list_2)) (and (= ret!0 refinement!list_0) (= ret!1 refinement!list_2) (= ret!2 refinement!list_1)) (and (= ret!0 refinement!list_1) (= ret!1 refinement!list_0) (= ret!2 refinement!list_2)) (and (= ret!0 refinement!list_1) (= ret!1 refinement!list_2) (= ret!2 refinement!list_0)) (and (= ret!0 refinement!list_2) (= ret!1 refinement!list_0) (= ret!2 refinement!list_1)) (and (= ret!0 refinement!list_2) (= ret!1 refinement!list_1) (= ret!2 refinement!list_0)))})]

Existential Specifications:
fromList [(original!sort,Spec {params = [original!list_0,original!list_1,original!list_2], choiceVars = [(original!n0 int),(original!n1 int),(original!n2 int)], preCondition = (and (<= original!n0 original!n1) (<= original!n1 original!n2) (or (and (= original!n0 original!list_0) (= original!n1 original!list_1) (= original!n2 original!list_2)) (and (= original!n0 original!list_0) (= original!n1 original!list_2) (= original!n2 original!list_1)) (and (= original!n0 original!list_1) (= original!n1 original!list_0) (= original!n2 original!list_2)) (and (= original!n0 original!list_1) (= original!n1 original!list_2) (= original!n2 original!list_0)) (and (= original!n0 original!list_2) (= original!n1 original!list_0) (= original!n2 original!list_1)) (and (= original!n0 original!list_2) (= original!n1 original!list_1) (= original!n2 original!list_0)))), postCondition = (and (= ret!0 original!n0) (= ret!1 original!n1) (= ret!2 original!n2))})]

Precondition:
  (and (= original!list_0 refinement!list_0) (= original!list_1 refinement!list_1) (= original!list_2 refinement!list_2))

Postcondition:
  (and (= original!ret_0 refinement!ret_0) (= original!ret_1 refinement!ret_1) (= original!ret_2 refinement!ret_2))

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const original!list_0 Int)
[<-recv] success
[send->] (declare-const original!list_1 Int)
[<-recv] success
[send->] (declare-const original!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!list_0 Int)
[<-recv] success
[send->] (declare-const refinement!list_1 Int)
[<-recv] success
[send->] (declare-const refinement!list_2 Int)
[<-recv] success
[send->] (declare-const refinement!shuffled_0 Int)
[<-recv] success
[send->] (declare-const refinement!shuffled_1 Int)
[<-recv] success
[send->] (declare-const refinement!shuffled_2 Int)
[<-recv] success
[send->] (assert (not (=> (and (= original!list_0 refinement!list_0)
              (= original!list_1 refinement!list_1)
              (= original!list_2 refinement!list_2))
         (and true
              (=> (or (and (= refinement!shuffled_0 refinement!list_0)
                           (= refinement!shuffled_1 refinement!list_1)
                           (= refinement!shuffled_2 refinement!list_2))
                      (and (= refinement!shuffled_0 refinement!list_0)
                           (= refinement!shuffled_1 refinement!list_2)
                           (= refinement!shuffled_2 refinement!list_1))
                      (and (= refinement!shuffled_0 refinement!list_1)
                           (= refinement!shuffled_1 refinement!list_0)
                           (= refinement!shuffled_2 refinement!list_2))
                      (and (= refinement!shuffled_0 refinement!list_1)
                           (= refinement!shuffled_1 refinement!list_2)
                           (= refinement!shuffled_2 refinement!list_0))
                      (and (= refinement!shuffled_0 refinement!list_2)
                           (= refinement!shuffled_1 refinement!list_0)
                           (= refinement!shuffled_2 refinement!list_1))
                      (and (= refinement!shuffled_0 refinement!list_2)
                           (= refinement!shuffled_1 refinement!list_1)
                           (= refinement!shuffled_2 refinement!list_0)))
                  (exists ((original!n0 Int) (original!n1 Int) (original!n2 Int))
                     (and (and (<= original!n0 original!n1) (<= original!n1 original!n2)
                               (or (and (= original!n0 original!list_0)
                                        (= original!n1 original!list_1)
                                        (= original!n2 original!list_2))
                                   (and (= original!n0 original!list_0)
                                        (= original!n1 original!list_2)
                                        (= original!n2 original!list_1))
                                   (and (= original!n0 original!list_1)
                                        (= original!n1 original!list_0)
                                        (= original!n2 original!list_2))
                                   (and (= original!n0 original!list_1)
                                        (= original!n1 original!list_2)
                                        (= original!n2 original!list_0))
                                   (and (= original!n0 original!list_2)
                                        (= original!n1 original!list_0)
                                        (= original!n2 original!list_1))
                                   (and (= original!n0 original!list_2)
                                        (= original!n1 original!list_1)
                                        (= original!n2 original!list_0))))
                          (exists ((original!sorted_0!1 Int) (original!sorted_1!1 Int)
                                   (original!sorted_2!1 Int))
                             (and (= original!sorted_0!1 original!n0)
                                  (= original!sorted_1!1 original!n1)
                                  (= original!sorted_2!1 original!n2)))
                          (forall ((original!sorted_0!1 Int) (original!sorted_1!1 Int)
                                   (original!sorted_2!1 Int))
                             (=> (and (= original!sorted_0!1 original!n0)
                                      (= original!sorted_1!1 original!n1)
                                      (= original!sorted_2!1 original!n2))
                                 (and (= (+ original!sorted_0!1 3) (+ refinement!shuffled_0 3))
                                      (= (+ original!sorted_1!1 3) (+ refinement!shuffled_1 3))
                                      (= (+ original!sorted_2!1 3)
                                         (+ refinement!shuffled_2 3))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun refinement!shuffled_2 () Int 0 ) (define-fun refinement!shuffled_0 () Int 0 ) (define-fun refinement!list_0 () Int 0 ) (define-fun refinement!shuffled_1 () Int 1 ) (define-fun refinement!list_1 () Int 0 ) (define-fun refinement!list_2 () Int 1 ) (define-fun original!list_2 () Int 1 ) (define-fun original!list_1 () Int 0 ) (define-fun original!list_0 () Int 0 ) )
Failure:
  (model (define-fun refinement!shuffled_2 () Int 0 ) (define-fun refinement!shuffled_0 () Int 0 ) (define-fun refinement!list_0 () Int 0 ) (define-fun refinement!shuffled_1 () Int 1 ) (define-fun refinement!list_1 () Int 0 ) (define-fun refinement!list_2 () Int 1 ) (define-fun original!list_2 () Int 1 ) (define-fun original!list_1 () Int 0 ) (define-fun original!list_0 () Int 0 ) )

real	0m0.105s
user	0m0.117s
sys	0m0.025s
