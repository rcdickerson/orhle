Replacements: fromList [(original!r,original!r!1)]

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  refinement (forall)
  original (exists)

Universal Programs:
[ SSeq
    [ SCall
        SFun { fName = refinement ! flipCoin , fParams = [] }
        [ refinement ! r ]
    , SIf
        (BEq (AVar refinement ! r) (ALit 0))
        (SAsgn refinement ! ret (ALit 20))
        (SAsgn refinement ! ret (ALit 10))
    ]
]

Existential Programs:
[ SSeq
    [ SCall
        SFun { fName = original ! flipCoin , fParams = [] }
        [ original ! r ]
    , SIf
        (BEq (AVar original ! r) (ALit 0))
        (SAsgn original ! ret (ALit 10))
        (SAsgn original ! ret (ALit 20))
    ]
]

Universal Specifications:
fromList [(refinement!flipCoin,Spec {params = [], choiceVars = [], preCondition = true, postCondition = (or (= ret! 0) (= ret! 1))})]

Existential Specifications:
fromList [(original!flipCoin,Spec {params = [], choiceVars = [(original!n int)], preCondition = (or (= original!n 0) (= original!n 1)), postCondition = (= ret! original!n)})]

Precondition:
  true

Postcondition:
  (= original!ret refinement!ret)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const refinement!r Int)
[<-recv] success
[send->] (assert (not (=> true
         (and true
              (=> (or (= refinement!r 0) (= refinement!r 1))
                  (and (=> (= refinement!r 0)
                           (exists ((original!n Int))
                              (and (or (= original!n 0) (= original!n 1))
                                   (exists ((original!r!1 Int))
                                      (= original!r!1 original!n))
                                   (forall ((original!r!1 Int))
                                      (=> (= original!r!1 original!n)
                                          (and (=> (= original!r!1 0) (= 10 20))
                                               (=> (not (= original!r!1 0)) (= 20 20))))))))
                       (=> (not (= refinement!r 0))
                           (exists ((original!n Int))
                              (and (or (= original!n 0) (= original!n 1))
                                   (exists ((original!r!1 Int))
                                      (= original!r!1 original!n))
                                   (forall ((original!r!1 Int))
                                      (=> (= original!r!1 original!n)
                                          (and (=> (= original!r!1 0) (= 10 10))
                                               (=> (not (= original!r!1 0)) (= 20 10))))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
Valid.

real	0m0.102s
user	0m0.119s
sys	0m0.028s
