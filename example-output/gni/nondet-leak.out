Replacements: fromList [(leak!3!r,leak!3!r!1)]

*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  leak[1] (forall)
  leak[2] (forall)
  leak[3] (exists)

Universal Programs:
[ SSeq
    [ SCall
        SFun { fName = leak ! 1 ! randInt , fParams = [] } [ leak ! 1 ! r ]
    , SIf
        (BEq (AVar leak ! 1 ! r) (ALit 50))
        (SAsgn leak !
           1 ! ret (AAdd (AVar leak ! 1 ! high) (AVar leak ! 1 ! low)))
        (SAsgn leak ! 1 ! ret (AVar leak ! 1 ! low))
    ]
, SSeq
    [ SCall
        SFun { fName = leak ! 2 ! randInt , fParams = [] } [ leak ! 2 ! r ]
    , SIf
        (BEq (AVar leak ! 2 ! r) (ALit 50))
        (SAsgn leak !
           2 ! ret (AAdd (AVar leak ! 2 ! high) (AVar leak ! 2 ! low)))
        (SAsgn leak ! 2 ! ret (AVar leak ! 2 ! low))
    ]
]

Existential Programs:
[ SSeq
    [ SCall
        SFun { fName = leak ! 3 ! randInt , fParams = [] } [ leak ! 3 ! r ]
    , SIf
        (BEq (AVar leak ! 3 ! r) (ALit 50))
        (SAsgn leak !
           3 ! ret (AAdd (AVar leak ! 3 ! high) (AVar leak ! 3 ! low)))
        (SAsgn leak ! 3 ! ret (AVar leak ! 3 ! low))
    ]
]

Universal Specifications:
fromList [(leak!1!randInt,Spec {params = [], choiceVars = [], preCondition = true, postCondition = (and (>= ret! 0) (< ret! 100))}),(leak!2!randInt,Spec {params = [], choiceVars = [], preCondition = true, postCondition = (and (>= ret! 0) (< ret! 100))})]

Existential Specifications:
fromList [(leak!3!randInt,Spec {params = [], choiceVars = [(leak!3!n int)], preCondition = (and (>= leak!3!n 0) (< leak!3!n 100)), postCondition = (= ret! leak!3!n)})]

Precondition:
  (and (= leak!1!high leak!3!high) (= leak!1!low leak!2!low) (= leak!2!low leak!3!low))

Postcondition:
  (= leak!2!ret leak!3!ret)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const leak!1!high Int)
[<-recv] success
[send->] (declare-const leak!1!low Int)
[<-recv] success
[send->] (declare-const leak!1!r Int)
[<-recv] success
[send->] (declare-const leak!2!high Int)
[<-recv] success
[send->] (declare-const leak!2!low Int)
[<-recv] success
[send->] (declare-const leak!2!r Int)
[<-recv] success
[send->] (declare-const leak!3!high Int)
[<-recv] success
[send->] (declare-const leak!3!low Int)
[<-recv] success
[send->] (assert (not (=> (and (= leak!1!high leak!3!high) (= leak!1!low leak!2!low)
              (= leak!2!low leak!3!low))
         (and true
              (=> (and (>= leak!2!r 0) (< leak!2!r 100))
                  (and (=> (= leak!2!r 50)
                           (and true
                                (=> (and (>= leak!1!r 0) (< leak!1!r 100))
                                    (and (=> (= leak!1!r 50)
                                             (exists ((leak!3!n Int))
                                                (and (and (>= leak!3!n 0) (< leak!3!n 100))
                                                     (exists ((leak!3!r!1 Int))
                                                        (= leak!3!r!1 leak!3!n))
                                                     (forall ((leak!3!r!1 Int))
                                                        (=> (= leak!3!r!1 leak!3!n)
                                                            (and (=> (= leak!3!r!1 50)
                                                                     (= (+ leak!2!high leak!2!low)
                                                                        (+ leak!3!high leak!3!low)))
                                                                 (=> (not (= leak!3!r!1 50))
                                                                     (= (+ leak!2!high leak!2!low)
                                                                        leak!3!low))))))))
                                         (=> (not (= leak!1!r 50))
                                             (exists ((leak!3!n Int))
                                                (and (and (>= leak!3!n 0) (< leak!3!n 100))
                                                     (exists ((leak!3!r!1 Int))
                                                        (= leak!3!r!1 leak!3!n))
                                                     (forall ((leak!3!r!1 Int))
                                                        (=> (= leak!3!r!1 leak!3!n)
                                                            (and (=> (= leak!3!r!1 50)
                                                                     (= (+ leak!2!high leak!2!low)
                                                                        (+ leak!3!high leak!3!low)))
                                                                 (=> (not (= leak!3!r!1 50))
                                                                     (= (+ leak!2!high leak!2!low)
                                                                        leak!3!low))))))))))))
                       (=> (not (= leak!2!r 50))
                           (and true
                                (=> (and (>= leak!1!r 0) (< leak!1!r 100))
                                    (and (=> (= leak!1!r 50)
                                             (exists ((leak!3!n Int))
                                                (and (and (>= leak!3!n 0) (< leak!3!n 100))
                                                     (exists ((leak!3!r!1 Int))
                                                        (= leak!3!r!1 leak!3!n))
                                                     (forall ((leak!3!r!1 Int))
                                                        (=> (= leak!3!r!1 leak!3!n)
                                                            (and (=> (= leak!3!r!1 50)
                                                                     (= leak!2!low
                                                                        (+ leak!3!high leak!3!low)))
                                                                 (=> (not (= leak!3!r!1 50))
                                                                     (= leak!2!low
                                                                        leak!3!low))))))))
                                         (=> (not (= leak!1!r 50))
                                             (exists ((leak!3!n Int))
                                                (and (and (>= leak!3!n 0) (< leak!3!n 100))
                                                     (exists ((leak!3!r!1 Int))
                                                        (= leak!3!r!1 leak!3!n))
                                                     (forall ((leak!3!r!1 Int))
                                                        (=> (= leak!3!r!1 leak!3!n)
                                                            (and (=> (= leak!3!r!1 50)
                                                                     (= leak!2!low
                                                                        (+ leak!3!high leak!3!low)))
                                                                 (=> (not (= leak!3!r!1 50))
                                                                     (= leak!2!low
                                                                        leak!3!low))))))))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun leak!2!r () Int 50 ) (define-fun leak!2!high () Int 2 ) (define-fun leak!3!high () Int 1 ) (define-fun leak!1!r () Int 49 ) (define-fun leak!3!low () Int 0 ) (define-fun leak!1!low () Int 0 ) (define-fun leak!2!low () Int 0 ) (define-fun leak!1!high () Int 1 ) )
Failure:
  (model (define-fun leak!2!r () Int 50 ) (define-fun leak!2!high () Int 2 ) (define-fun leak!3!high () Int 1 ) (define-fun leak!1!r () Int 49 ) (define-fun leak!3!low () Int 0 ) (define-fun leak!1!low () Int 0 ) (define-fun leak!2!low () Int 0 ) (define-fun leak!1!high () Int 1 ) )

real	0m0.100s
user	0m0.134s
sys	0m0.035s
