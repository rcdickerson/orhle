
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  denningA1 (forall)
  denningA2 (forall)
  denningE (exists)

:: Universal Programs
[ SSeq
    [ SAsgn denningA1 ! i (ALit 1)
    , SAsgn denningA1 ! n (ALit 0)
    , SAsgn denningA1 ! sum (ALit 0)
    , SWhile
        (BLe (AVar denningA1 ! i) (ALit 100))
        (SSeq
           [ SAsgn denningA1 ! flag (AVar denningA1 ! f1_L)
           , SAsgn denningA1 ! f2_L (AVar denningA1 ! flag)
           , SAsgn denningA1 ! x (AVar denningA1 ! f3_H)
           , SIf
               (BNot (BEq (AVar denningA1 ! flag) (ALit 0)))
               (SSeq
                  [ SAsgn denningA1 ! n (AAdd (AVar denningA1 ! n) (ALit 1))
                  , SAsgn denningA1 !
                      sum (AAdd (AVar denningA1 ! sum) (AVar denningA1 ! x))
                  ])
               SSkip
           , SAsgn denningA1 ! i (AAdd (AVar denningA1 ! i) (ALit 1))
           ])
        ( And
            [ Eq (Var denningA2 ! f1_L) (Var denningA2 ! f2_L)
            , Eq (Var denningA2 ! f1_L) (Var denningA1 ! f1_L)
            , Eq (Var denningA1 ! f1_L) (Var denningA2 ! f1_L)
            , Eq (Var denningA2 ! f1_L) (Var denningE ! f1_L)
            , Imp
                (Gt (Var denningA1 ! i) (Num 1))
                (Eq (Var denningA1 ! f1_L) (Var denningA1 ! f2_L))
            ]
        , Sub [ Num 100 , Var i ]
        )
    , SAsgn denningA1 !
        f4_H
          (AAdd
             (AAdd (AVar denningA1 ! n) (AVar denningA1 ! sum))
             (ADiv (AVar denningA1 ! sum) (AVar denningA1 ! n)))
    , SAsgn denningA1 ! retVal (AVar denningA1 ! f4_H)
    ]
, SSeq
    [ SAsgn denningA2 ! i (ALit 1)
    , SAsgn denningA2 ! n (ALit 0)
    , SAsgn denningA2 ! sum (ALit 0)
    , SWhile
        (BLe (AVar denningA2 ! i) (ALit 100))
        (SSeq
           [ SAsgn denningA2 ! flag (AVar denningA2 ! f1_L)
           , SAsgn denningA2 ! f2_L (AVar denningA2 ! flag)
           , SAsgn denningA2 ! x (AVar denningA2 ! f3_H)
           , SIf
               (BNot (BEq (AVar denningA2 ! flag) (ALit 0)))
               (SSeq
                  [ SAsgn denningA2 ! n (AAdd (AVar denningA2 ! n) (ALit 1))
                  , SAsgn denningA2 !
                      sum (AAdd (AVar denningA2 ! sum) (AVar denningA2 ! x))
                  ])
               SSkip
           , SAsgn denningA2 ! i (AAdd (AVar denningA2 ! i) (ALit 1))
           ])
        ( And
            [ Eq (Var denningA1 ! f1_L) (Var denningE ! f1_L)
            , Eq (Var denningA1 ! f2_L) (Var denningE ! f2_L)
            , Eq (Var denningA1 ! f1_L) (Var denningA2 ! f1_L)
            , Eq (Var denningA2 ! f1_L) (Var denningE ! f1_L)
            , Imp
                (Gt (Var denningA2 ! i) (Num 1))
                (Eq (Var denningA2 ! f1_L) (Var denningA2 ! f2_L))
            ]
        , Sub [ Num 100 , Var i ]
        )
    , SAsgn denningA2 !
        f4_H
          (AAdd
             (AAdd (AVar denningA2 ! n) (AVar denningA2 ! sum))
             (ADiv (AVar denningA2 ! sum) (AVar denningA2 ! n)))
    , SAsgn denningA2 ! retVal (AVar denningA2 ! f4_H)
    ]
]

:: Existential Programs
[ SSeq
    [ SAsgn denningE ! i (ALit 1)
    , SAsgn denningE ! n (ALit 0)
    , SAsgn denningE ! sum (ALit 0)
    , SWhile
        (BLe (AVar denningE ! i) (ALit 100))
        (SSeq
           [ SAsgn denningE ! flag (AVar denningE ! f1_L)
           , SAsgn denningE ! f2_L (AVar denningE ! flag)
           , SAsgn denningE ! x (AVar denningE ! f3_H)
           , SIf
               (BNot (BEq (AVar denningE ! flag) (ALit 0)))
               (SSeq
                  [ SAsgn denningE ! n (AAdd (AVar denningE ! n) (ALit 1))
                  , SAsgn denningE !
                      sum (AAdd (AVar denningE ! sum) (AVar denningE ! x))
                  ])
               SSkip
           , SAsgn denningE ! i (AAdd (AVar denningE ! i) (ALit 1))
           ])
        ( And
            [ Eq (Var denningA2 ! f1_L) (Var denningA2 ! f2_L)
            , Eq (Var denningA1 ! f1_L) (Var denningA1 ! f2_L)
            , Eq (Var denningA1 ! f1_L) (Var denningA2 ! f1_L)
            , Eq (Var denningA2 ! f1_L) (Var denningE ! f1_L)
            , Imp
                (Gt (Var denningE ! i) (Num 1))
                (And
                   [ Eq (Var denningA2 ! f1_L) (Var denningE ! f1_L)
                   , Eq (Var denningA2 ! f2_L) (Var denningE ! f2_L)
                   , Eq (Var denningE ! f1_L) (Var denningE ! f2_L)
                   ])
            ]
        , Sub [ Num 100 , Var i ]
        )
    , SAsgn denningE !
        f4_H
          (AAdd
             (AAdd (AVar denningE ! n) (AVar denningE ! sum))
             (ADiv (AVar denningE ! sum) (AVar denningE ! n)))
    , SAsgn denningE ! retVal (AVar denningE ! f4_H)
    ]
]

:: Universal Specifications
fromList []

:: Existential Specifications
fromList []

:: Precondition
And
  [ Eq (Var denningA1 ! f3_H) (Var denningE ! f3_H)
  , Eq (Var denningA1 ! f4_H) (Var denningE ! f4_H)
  , Eq (Var denningA1 ! f1_L) (Var denningA2 ! f1_L)
  , Eq (Var denningA1 ! f2_L) (Var denningA2 ! f2_L)
  , Eq (Var denningA2 ! f1_L) (Var denningE ! f1_L)
  , Eq (Var denningA2 ! f2_L) (Var denningE ! f2_L)
  ]

:: Postcondition
And
  [ Eq (Var denningA2 ! f1_L) (Var denningE ! f1_L)
  , Eq (Var denningA2 ! f2_L) (Var denningE ! f2_L)
  ]

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const denningA1!f1_L Int)
[<-recv] success
[send->] (declare-const denningA1!f2_L Int)
[<-recv] success
[send->] (declare-const denningA1!f3_H Int)
[<-recv] success
[send->] (declare-const denningA1!f4_H Int)
[<-recv] success
[send->] (declare-const denningA2!f1_L Int)
[<-recv] success
[send->] (declare-const denningA2!f2_L Int)
[<-recv] success
[send->] (declare-const denningE!f1_L Int)
[<-recv] success
[send->] (declare-const denningE!f2_L Int)
[<-recv] success
[send->] (declare-const denningE!f3_H Int)
[<-recv] success
[send->] (declare-const denningE!f4_H Int)
[<-recv] success
[send->] (declare-const i Int)
[<-recv] success
[send->] (assert (not (=> (and (= denningA1!f3_H denningE!f3_H)
              (= denningA1!f4_H denningE!f4_H) (= denningA1!f1_L denningA2!f1_L)
              (= denningA1!f2_L denningA2!f2_L) (= denningA2!f1_L denningE!f1_L)
              (= denningA2!f2_L denningE!f2_L))
         (and (and (= denningA1!f1_L denningE!f1_L)
                   (= denningA1!f2_L denningE!f2_L) (= denningA1!f1_L denningA2!f1_L)
                   (= denningA2!f1_L denningE!f1_L)
                   (=> (> 1 1) (= denningA2!f1_L denningA2!f2_L)))
              (forall ((denningA2!f1_L!1 Int) (denningA2!f2_L!1 Int)
                       (denningA2!f3_H!1 Int) (denningA2!flag!1 Int) (denningA2!i!1 Int)
                       (denningA2!n!1 Int) (denningA2!sum!1 Int) (denningA2!x!1 Int))
                 (=> (and (<= denningA2!i!1 100)
                          (and (= denningA1!f1_L denningE!f1_L)
                               (= denningA1!f2_L denningE!f2_L)
                               (= denningA1!f1_L denningA2!f1_L!1)
                               (= denningA2!f1_L!1 denningE!f1_L)
                               (=> (> denningA2!i!1 1) (= denningA2!f1_L!1 denningA2!f2_L!1))))
                     (and (=> (not (= denningA2!f1_L!1 0))
                              (and (= denningA1!f1_L denningE!f1_L)
                                   (= denningA1!f2_L denningE!f2_L)
                                   (= denningA1!f1_L denningA2!f1_L!1)
                                   (= denningA2!f1_L!1 denningE!f1_L)
                                   (=> (> (+ denningA2!i!1 1) 1)
                                       (= denningA2!f1_L!1 denningA2!f1_L!1))))
                          (=> (not (not (= denningA2!f1_L!1 0)))
                              (and (= denningA1!f1_L denningE!f1_L)
                                   (= denningA1!f2_L denningE!f2_L)
                                   (= denningA1!f1_L denningA2!f1_L!1)
                                   (= denningA2!f1_L!1 denningE!f1_L)
                                   (=> (> (+ denningA2!i!1 1) 1)
                                       (= denningA2!f1_L!1 denningA2!f1_L!1)))))))
              (forall ((denningA2!f1_L!1 Int) (denningA2!f2_L!1 Int)
                       (denningA2!f3_H!1 Int) (denningA2!flag!1 Int) (denningA2!i!1 Int)
                       (denningA2!n!1 Int) (denningA2!sum!1 Int) (denningA2!x!1 Int))
                 (=> (and (not (<= denningA2!i!1 100))
                          (and (= denningA1!f1_L denningE!f1_L)
                               (= denningA1!f2_L denningE!f2_L)
                               (= denningA1!f1_L denningA2!f1_L!1)
                               (= denningA2!f1_L!1 denningE!f1_L)
                               (=> (> denningA2!i!1 1) (= denningA2!f1_L!1 denningA2!f2_L!1))))
                     (and (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                               (= denningA2!f1_L!1 denningA1!f1_L)
                               (= denningA1!f1_L denningA2!f1_L!1)
                               (= denningA2!f1_L!1 denningE!f1_L)
                               (=> (> 1 1) (= denningA1!f1_L denningA1!f2_L)))
                          (forall ((denningA1!f1_L!1 Int) (denningA1!f2_L!1 Int)
                                   (denningA1!f3_H!1 Int) (denningA1!flag!1 Int) (denningA1!i!1 Int)
                                   (denningA1!n!1 Int) (denningA1!sum!1 Int) (denningA1!x!1 Int))
                             (=> (and (<= denningA1!i!1 100)
                                      (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                           (= denningA2!f1_L!1 denningA1!f1_L!1)
                                           (= denningA1!f1_L!1 denningA2!f1_L!1)
                                           (= denningA2!f1_L!1 denningE!f1_L)
                                           (=> (> denningA1!i!1 1)
                                               (= denningA1!f1_L!1 denningA1!f2_L!1))))
                                 (and (=> (not (= denningA1!f1_L!1 0))
                                          (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                               (= denningA2!f1_L!1 denningA1!f1_L!1)
                                               (= denningA1!f1_L!1 denningA2!f1_L!1)
                                               (= denningA2!f1_L!1 denningE!f1_L)
                                               (=> (> (+ denningA1!i!1 1) 1)
                                                   (= denningA1!f1_L!1 denningA1!f1_L!1))))
                                      (=> (not (not (= denningA1!f1_L!1 0)))
                                          (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                               (= denningA2!f1_L!1 denningA1!f1_L!1)
                                               (= denningA1!f1_L!1 denningA2!f1_L!1)
                                               (= denningA2!f1_L!1 denningE!f1_L)
                                               (=> (> (+ denningA1!i!1 1) 1)
                                                   (= denningA1!f1_L!1 denningA1!f1_L!1)))))))
                          (forall ((denningA1!f1_L!1 Int) (denningA1!f2_L!1 Int)
                                   (denningA1!f3_H!1 Int) (denningA1!flag!1 Int) (denningA1!i!1 Int)
                                   (denningA1!n!1 Int) (denningA1!sum!1 Int) (denningA1!x!1 Int))
                             (=> (and (not (<= denningA1!i!1 100))
                                      (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                           (= denningA2!f1_L!1 denningA1!f1_L!1)
                                           (= denningA1!f1_L!1 denningA2!f1_L!1)
                                           (= denningA2!f1_L!1 denningE!f1_L)
                                           (=> (> denningA1!i!1 1)
                                               (= denningA1!f1_L!1 denningA1!f2_L!1))))
                                 (and (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                           (= denningA1!f1_L!1 denningA1!f2_L!1)
                                           (= denningA1!f1_L!1 denningA2!f1_L!1)
                                           (= denningA2!f1_L!1 denningE!f1_L)
                                           (=> (> 1 1)
                                               (and (= denningA2!f1_L!1 denningE!f1_L)
                                                    (= denningA2!f2_L!1 denningE!f2_L)
                                                    (= denningE!f1_L denningE!f2_L))))
                                      (forall ((denningE!f1_L!1 Int) (denningE!f2_L!1 Int)
                                               (denningE!f3_H!1 Int) (denningE!flag!1 Int)
                                               (denningE!i!1 Int) (denningE!n!1 Int)
                                               (denningE!sum!1 Int) (denningE!x!1 Int))
                                         (=> (and (<= denningE!i!1 100)
                                                  (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                                       (= denningA1!f1_L!1 denningA1!f2_L!1)
                                                       (= denningA1!f1_L!1 denningA2!f1_L!1)
                                                       (= denningA2!f1_L!1 denningE!f1_L!1)
                                                       (=> (> denningE!i!1 1)
                                                           (and (= denningA2!f1_L!1 denningE!f1_L!1)
                                                                (= denningA2!f2_L!1 denningE!f2_L!1)
                                                                (= denningE!f1_L!1
                                                                   denningE!f2_L!1)))))
                                             (and (=> (not (= denningE!f1_L!1 0))
                                                      (and (and (= denningA2!f1_L!1
                                                                   denningA2!f2_L!1)
                                                                (= denningA1!f1_L!1
                                                                   denningA1!f2_L!1)
                                                                (= denningA1!f1_L!1
                                                                   denningA2!f1_L!1)
                                                                (= denningA2!f1_L!1 denningE!f1_L!1)
                                                                (=> (> (+ denningE!i!1 1) 1)
                                                                    (and (= denningA2!f1_L!1
                                                                            denningE!f1_L!1)
                                                                         (= denningA2!f2_L!1
                                                                            denningE!f1_L!1)
                                                                         (= denningE!f1_L!1
                                                                            denningE!f1_L!1))))
                                                           (< (- 100 i) (- 100 i))))
                                                  (=> (not (not (= denningE!f1_L!1 0)))
                                                      (and (and (= denningA2!f1_L!1
                                                                   denningA2!f2_L!1)
                                                                (= denningA1!f1_L!1
                                                                   denningA1!f2_L!1)
                                                                (= denningA1!f1_L!1
                                                                   denningA2!f1_L!1)
                                                                (= denningA2!f1_L!1 denningE!f1_L!1)
                                                                (=> (> (+ denningE!i!1 1) 1)
                                                                    (and (= denningA2!f1_L!1
                                                                            denningE!f1_L!1)
                                                                         (= denningA2!f2_L!1
                                                                            denningE!f1_L!1)
                                                                         (= denningE!f1_L!1
                                                                            denningE!f1_L!1))))
                                                           (< (- 100 i) (- 100 i)))))))
                                      (forall ((denningE!f1_L!1 Int) (denningE!f2_L!1 Int)
                                               (denningE!f3_H!1 Int) (denningE!flag!1 Int)
                                               (denningE!i!1 Int) (denningE!n!1 Int)
                                               (denningE!sum!1 Int) (denningE!x!1 Int))
                                         (=> (and (not (<= denningE!i!1 100))
                                                  (and (= denningA2!f1_L!1 denningA2!f2_L!1)
                                                       (= denningA1!f1_L!1 denningA1!f2_L!1)
                                                       (= denningA1!f1_L!1 denningA2!f1_L!1)
                                                       (= denningA2!f1_L!1 denningE!f1_L!1)
                                                       (=> (> denningE!i!1 1)
                                                           (and (= denningA2!f1_L!1 denningE!f1_L!1)
                                                                (= denningA2!f2_L!1 denningE!f2_L!1)
                                                                (= denningE!f1_L!1
                                                                   denningE!f2_L!1)))))
                                             (and (= denningA2!f1_L!1 denningE!f1_L!1)
                                                  (= denningA2!f2_L!1 denningE!f2_L!1))))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] sat
[send->] (get-model )
[<-recv] (model (define-fun denningE!f1_L () Int 1 ) (define-fun denningE!f2_L () Int 0 ) (define-fun denningA1!f2_L () Int 0 ) (define-fun denningA2!f2_L () Int 0 ) (define-fun denningA1!f1_L () Int 1 ) (define-fun denningA2!f1_L () Int 1 ) (define-fun denningE!f4_H () Int 0 ) (define-fun denningA1!f4_H () Int 0 ) (define-fun denningE!f3_H () Int 0 ) (define-fun denningA1!f3_H () Int 0 ) (define-fun i () Int 0 ) )
Failure:
  (model (define-fun denningE!f1_L () Int 1 ) (define-fun denningE!f2_L () Int 0 ) (define-fun denningA1!f2_L () Int 0 ) (define-fun denningA2!f2_L () Int 0 ) (define-fun denningA1!f1_L () Int 1 ) (define-fun denningA2!f1_L () Int 1 ) (define-fun denningE!f4_H () Int 0 ) (define-fun denningA1!f4_H () Int 0 ) (define-fun denningE!f3_H () Int 0 ) (define-fun denningA1!f3_H () Int 0 ) (define-fun i () Int 0 ) )

real	0m0.215s
user	0m0.272s
sys	0m0.009s
