
*******************************************
****               ORHLE               ****
****     The Oracular RHLE Verifier    ****
*******************************************

:: Executions
  nonleak[1] (forall)
  nonleak[2] (forall)
  nonleak[3] (exists)

:: Universal Programs
[ SSeq
    [ SCall "nonleak!1!randInt" [] [ nonleak ! 1 ! r ]
    , SIf
        (BEq (AVar nonleak ! 1 ! r) (ALit 5000))
        (SAsgn nonleak !
           1 ! ret (AAdd (AVar nonleak ! 1 ! high) (AVar nonleak ! 1 ! low)))
        (SAsgn nonleak ! 1 ! ret (AVar nonleak ! 1 ! low))
    , SAsgn nonleak ! 1 ! retVal (AVar nonleak ! 1 ! ret)
    ]
, SSeq
    [ SCall "nonleak!2!randInt" [] [ nonleak ! 2 ! r ]
    , SIf
        (BEq (AVar nonleak ! 2 ! r) (ALit 5000))
        (SAsgn nonleak !
           2 ! ret (AAdd (AVar nonleak ! 2 ! high) (AVar nonleak ! 2 ! low)))
        (SAsgn nonleak ! 2 ! ret (AVar nonleak ! 2 ! low))
    , SAsgn nonleak ! 2 ! retVal (AVar nonleak ! 2 ! ret)
    ]
]

:: Existential Programs
[ SSeq
    [ SCall "nonleak!3!randInt" [] [ nonleak ! 3 ! r ]
    , SIf
        (BEq (AVar nonleak ! 3 ! r) (ALit 5000))
        (SAsgn nonleak !
           3 ! ret (AAdd (AVar nonleak ! 3 ! high) (AVar nonleak ! 3 ! low)))
        (SAsgn nonleak ! 3 ! ret (AVar nonleak ! 3 ! low))
    , SAsgn nonleak ! 3 ! retVal (AVar nonleak ! 3 ! ret)
    ]
]

:: Universal Specifications
fromList [("nonleak!1!randInt",Spec {spec_params = [], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = And [Gte (Var ret!) (Num 0),Lt (Var ret!) (Num 100)]}),("nonleak!2!randInt",Spec {spec_params = [], spec_choiceVars = [], spec_preCondition = ATrue, spec_postCondition = And [Gte (Var ret!) (Num 0),Lt (Var ret!) (Num 100)]})]

:: Existential Specifications
fromList [("nonleak!3!randInt",Spec {spec_params = [], spec_choiceVars = [nonleak!3!n], spec_preCondition = And [Gte (Var nonleak!3!n) (Num 0),Lt (Var nonleak!3!n) (Num 100)], spec_postCondition = Eq (Var ret!) (Var nonleak!3!n)})]

:: Precondition
And
  [ Eq (Var nonleak ! 1 ! high) (Var nonleak ! 3 ! high)
  , Eq (Var nonleak ! 1 ! low) (Var nonleak ! 2 ! low)
  , Eq (Var nonleak ! 2 ! low) (Var nonleak ! 3 ! low)
  ]

:: Postcondition
Eq (Var nonleak ! 2 ! ret) (Var nonleak ! 3 ! ret)

[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
[send->] (declare-const nonleak!1!high Int)
[<-recv] success
[send->] (declare-const nonleak!1!low Int)
[<-recv] success
[send->] (declare-const nonleak!1!r Int)
[<-recv] success
[send->] (declare-const nonleak!2!high Int)
[<-recv] success
[send->] (declare-const nonleak!2!low Int)
[<-recv] success
[send->] (declare-const nonleak!2!r Int)
[<-recv] success
[send->] (declare-const nonleak!3!high Int)
[<-recv] success
[send->] (declare-const nonleak!3!low Int)
[<-recv] success
[send->] (assert (not (=> (and (= nonleak!1!high nonleak!3!high)
              (= nonleak!1!low nonleak!2!low) (= nonleak!2!low nonleak!3!low))
         (and true
              (=> (and (>= nonleak!2!r 0) (< nonleak!2!r 100))
                  (and (=> (= nonleak!2!r 5000)
                           (and true
                                (=> (and (>= nonleak!1!r 0) (< nonleak!1!r 100))
                                    (and (=> (= nonleak!1!r 5000)
                                             (exists ((nonleak!3!n Int))
                                                (and (and (>= nonleak!3!n 0) (< nonleak!3!n 100))
                                                     (exists ((nonleak!3!r!1 Int))
                                                        (= nonleak!3!r!1 nonleak!3!n))
                                                     (forall ((nonleak!3!r!1 Int))
                                                        (=> (= nonleak!3!r!1 nonleak!3!n)
                                                            (and (=> (= nonleak!3!r!1 5000)
                                                                     (= (+ nonleak!2!high
                                                                           nonleak!2!low)
                                                                        (+ nonleak!3!high
                                                                           nonleak!3!low)))
                                                                 (=> (not (= nonleak!3!r!1 5000))
                                                                     (= (+ nonleak!2!high
                                                                           nonleak!2!low)
                                                                        nonleak!3!low))))))))
                                         (=> (not (= nonleak!1!r 5000))
                                             (exists ((nonleak!3!n Int))
                                                (and (and (>= nonleak!3!n 0) (< nonleak!3!n 100))
                                                     (exists ((nonleak!3!r!1 Int))
                                                        (= nonleak!3!r!1 nonleak!3!n))
                                                     (forall ((nonleak!3!r!1 Int))
                                                        (=> (= nonleak!3!r!1 nonleak!3!n)
                                                            (and (=> (= nonleak!3!r!1 5000)
                                                                     (= (+ nonleak!2!high
                                                                           nonleak!2!low)
                                                                        (+ nonleak!3!high
                                                                           nonleak!3!low)))
                                                                 (=> (not (= nonleak!3!r!1 5000))
                                                                     (= (+ nonleak!2!high
                                                                           nonleak!2!low)
                                                                        nonleak!3!low))))))))))))
                       (=> (not (= nonleak!2!r 5000))
                           (and true
                                (=> (and (>= nonleak!1!r 0) (< nonleak!1!r 100))
                                    (and (=> (= nonleak!1!r 5000)
                                             (exists ((nonleak!3!n Int))
                                                (and (and (>= nonleak!3!n 0) (< nonleak!3!n 100))
                                                     (exists ((nonleak!3!r!1 Int))
                                                        (= nonleak!3!r!1 nonleak!3!n))
                                                     (forall ((nonleak!3!r!1 Int))
                                                        (=> (= nonleak!3!r!1 nonleak!3!n)
                                                            (and (=> (= nonleak!3!r!1 5000)
                                                                     (= nonleak!2!low
                                                                        (+ nonleak!3!high
                                                                           nonleak!3!low)))
                                                                 (=> (not (= nonleak!3!r!1 5000))
                                                                     (= nonleak!2!low
                                                                        nonleak!3!low))))))))
                                         (=> (not (= nonleak!1!r 5000))
                                             (exists ((nonleak!3!n Int))
                                                (and (and (>= nonleak!3!n 0) (< nonleak!3!n 100))
                                                     (exists ((nonleak!3!r!1 Int))
                                                        (= nonleak!3!r!1 nonleak!3!n))
                                                     (forall ((nonleak!3!r!1 Int))
                                                        (=> (= nonleak!3!r!1 nonleak!3!n)
                                                            (and (=> (= nonleak!3!r!1 5000)
                                                                     (= nonleak!2!low
                                                                        (+ nonleak!3!high
                                                                           nonleak!3!low)))
                                                                 (=> (not (= nonleak!3!r!1 5000))
                                                                     (= nonleak!2!low
                                                                        nonleak!3!low))))))))))))))))) )
[<-recv] success
[send->] (check-sat )
[<-recv] unsat
Valid.

real	0m0.201s
user	0m0.203s
sys	0m0.019s
