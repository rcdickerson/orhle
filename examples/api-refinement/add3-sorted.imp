forall: refinement;
exists: original;

pre:  (and
        (= original!list_0 refinement!list_0)
        (= original!list_1 refinement!list_1)
        (= original!list_2 refinement!list_2));
post: (and
        (= original!ret_0 refinement!ret_0)
        (= original!ret_1 refinement!ret_1)
        (= original!ret_2 refinement!ret_2));

expected: valid;

// The original program scrambles the list to some
// arbitrary permutation then adds three to each value.
prog original(list):
  scrambled[3] := call scramble(list)
      @templateVars { n0, n1, n2 }
      @pre { (or (and (= n0 list_0)
                      (= n1 list_1)
                      (= n2 list_2))
                 (and (= n0 list_0)
                      (= n1 list_2)
                      (= n2 list_1))
                 (and (= n0 list_1)
                      (= n1 list_0)
                      (= n2 list_2))
                 (and (= n0 list_1)
                      (= n1 list_2)
                      (= n2 list_0))
                 (and (= n0 list_2)
                      (= n1 list_0)
                      (= n2 list_1))
                 (and (= n0 list_2)
                      (= n1 list_1)
                      (= n2 list_0))) }
      @post { (and (= scrambled_0 n0)
                   (= scrambled_1 n1)
                   (= scrambled_2 n2)) };
  ret_0 := scrambled_0 + 3;
  ret_1 := scrambled_1 + 3;
  ret_2 := scrambled_2 + 3;
endp

// The refinement program sorts the list then adds three
// to each value.
prog refinement(list):
  sorted[3] := call sort(list)
      @post { (and (<= sorted_0 sorted_1)
                   (<= sorted_1 sorted_2)
                   (or (and (= sorted_0 list_0)
                            (= sorted_1 list_1)
                            (= sorted_2 list_2))
                       (and (= sorted_0 list_0)
                            (= sorted_1 list_2)
                            (= sorted_2 list_1))
                       (and (= sorted_0 list_1)
                            (= sorted_1 list_0)
                            (= sorted_2 list_2))
                       (and (= sorted_0 list_1)
                            (= sorted_1 list_2)
                            (= sorted_2 list_0))
                       (and (= sorted_0 list_2)
                            (= sorted_1 list_0)
                            (= sorted_2 list_1))
                       (and (= sorted_0 list_2)
                            (= sorted_1 list_1)
                            (= sorted_2 list_0)))) };
  ret_0 := sorted_0 + 3;
  ret_1 := sorted_1 + 3;
  ret_2 := sorted_2 + 3;
endp
