// A program that sorts and sums a list together with a program that
// sums the list without sorting. Dropping the sort constitutes a
// valid refinement since addition is commutative.

pre: true;
sat: forall refinement. exists original. (= original!sum refinment!sum);

prog original(list, length):
  sorted := call sort(list)
    pre  { true }
    post { (and
             (permutation list length)
             (forall ((i Int) (j Int))
               ((=> (<= i j) (<= (select sorted i) (select sorted j)))))) };
  i := 0;
  sum := 0;
  while (i < length):
    inv { (= sum  }
    elt := call get(list, i)
           pre {true}
           post {};
    sum := sum + elt;
  end;
end