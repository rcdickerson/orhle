// From:
//   Rastogi, Aseem & Mardziel, Piotr & Hicks, Michael & Hammer, Matthew. (2013).
//   Knowledge inference for optimizing secure multi-party computation.
//   3-14. 10.1145/2465106.2465117.

expected: invalid;

forall: median[1], median[2];
exists: median[3];

// High:
//   b1
//   b2
//   b3
//   a3
//   x1
//   x2
// Low:
//   a1
//   a2
//   m

// Knowing a1, a2, and m is enough to infer x1 and x2.

pre: (and
       // High
       (= median!1!b1 median!3!b1)
       (= median!1!b2 median!3!b2)
       (= median!1!b3 median!3!b3)
       (= median!1!a3 median!3!a3)
       (= median!1!x1 median!3!x1)
       (= median!1!x2 median!3!x2)

       // Low
       (= median!1!a1 median!2!a1)
       (= median!1!a2 median!2!a2)
       (= median!1!m  median!2!m)

       (= median!2!a1 median!3!a1)
       (= median!2!a2 median!3!a2)
       (= median!2!m  median!3!m)

       // Control Flow
       (=> (<= median!1!a1 median!1!b1) (= median!1!x1 1))
       (=> (> median!1!a1 median!1!b1) (= median!1!x1 0))
       (=> (= median!1!x1 1) (= median!1!a3 median!1!a2))
       (=> (not (= median!1!x1 1)) (= median!1!a3 median!1!a1))
       (=> (= median!1!x1 1) (= median!1!b3 median!1!b1))
       (=> (not (= median!1!x1 1)) (= median!1!b3 median!1!b2))
       (=> (<= median!1!a3 median!1!b3) (= median!1!x2 1))
       (=> (> median!1!a3 median!1!b3) (= median!1!x2 0))
       (=> (= median!1!x2 1) (= median!1!m median!1!a3))
       (=> (not (= median!1!x2 1)) (= median!1!m median!1!b3))
       (= median!1!ret median!1!m)

       (=> (<= median!2!a1 median!2!b1) (= median!2!x1 1))
       (=> (> median!2!a1 median!2!b1) (= median!2!x1 0))
       (=> (= median!2!x1 1) (= median!2!a3 median!2!a2))
       (=> (not (= median!2!x1 1)) (= median!2!a3 median!2!a1))
       (=> (= median!2!x1 1) (= median!2!b3 median!2!b1))
       (=> (not (= median!2!x1 1)) (= median!2!b3 median!2!b2))
       (=> (<= median!2!a3 median!2!b3) (= median!2!x2 1))
       (=> (> median!2!a3 median!2!b3) (= median!2!x2 0))
       (=> (= median!2!x2 1) (= median!2!m median!2!a3))
       (=> (not (= median!2!x2 1)) (= median!2!m median!2!b3))
       (= median!2!ret median!2!m)

       (=> (<= median!3!a1 median!3!b1) (= median!3!x1 1))
       (=> (> median!3!a1 median!3!b1) (= median!3!x1 0))
       (=> (= median!3!x1 1) (= median!3!a3 median!3!a2))
       (=> (not (= median!3!x1 1)) (= median!3!a3 median!3!a1))
       (=> (= median!3!x1 1) (= median!3!b3 median!3!b1))
       (=> (not (= median!3!x1 1)) (= median!3!b3 median!3!b2))
       (=> (<= median!3!a3 median!3!b3) (= median!3!x2 1))
       (=> (> median!3!a3 median!3!b3) (= median!3!x2 0))
       (=> (= median!3!x2 1) (= median!3!m median!3!a3))
       (=> (not (= median!3!x2 1)) (= median!3!m median!3!b3))
       (= median!3!ret median!3!m)

       // Program Preconditions (values are ordered, distinct)
       (< median!1!a1 median!1!a2)
       (< median!1!b1 median!1!b2)

       (not (= median!1!a1 median!1!a2))
       (not (= median!1!a1 median!1!b1))
       (not (= median!1!a1 median!1!b2))
       (not (= median!1!a2 median!1!b1))
       (not (= median!1!a2 median!1!b2))
       (not (= median!1!b1 median!1!b2))

       (not (= median!2!a1 median!2!a2))
       (not (= median!2!a1 median!2!b1))
       (not (= median!2!a1 median!2!b2))
       (not (= median!2!a2 median!2!b1))
       (not (= median!2!a2 median!2!b2))
       (not (= median!2!b1 median!2!b2))

       (not (= median!3!a1 median!3!a2))
       (not (= median!3!a1 median!3!b1))
       (not (= median!3!a1 median!3!b2))
       (not (= median!3!a2 median!3!b1))
       (not (= median!3!a2 median!3!b2))
       (not (= median!3!b1 median!3!b2)));

post: (= median!2!ret median!3!ret);


prog median(a1, a2, b1, b2):
  if (a1 <= b1) then
    x1 := 1;
  else
    x1 := 0;
  end

  if (x1 == 1) then
    a3 := a2;
  else
    a3 := a1;
  end

  if (x1 == 1) then
    b3 := b1;
  else
    b3 := b2;
  end

  if (a3 <= b3) then
    x2 := 1;
  else
    x2 := 0;
  end

  if (x2 == 1) then
    m := a3;
  else
    m := b3;
  end

  ret := m;
endp